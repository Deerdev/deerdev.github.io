<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[[译]An iOS app architecture exploration]]></title>
      <url>/2017/06/15/20170615An%20iOS%20app%20architecture%20exploration/</url>
      <content type="html"><![CDATA[<blockquote>
<p>来源 <a href="https://medium.com/@tsif/an-ios-app-architecture-exploration-47a94faa2ec5" target="_blank" rel="external">An iOS app architecture exploration</a></p>
</blockquote>
<h1 id="1-减轻View-Controllers"><a href="#1-减轻View-Controllers" class="headerlink" title="1.减轻View Controllers"></a>1.减轻View Controllers</h1><h2 id="1-1-减轻UITableViewController"><a href="#1-1-减轻UITableViewController" class="headerlink" title="1.1 减轻UITableViewController"></a>1.1 减轻UITableViewController</h2><h3 id="1-1-1-将cell的配置过程放到cell中-Handle-Cell-Configuration-internally"><a href="#1-1-1-将cell的配置过程放到cell中-Handle-Cell-Configuration-internally" class="headerlink" title="1.1.1 将cell的配置过程放到cell中(Handle Cell Configuration internally)"></a>1.1.1 将cell的配置过程放到cell中(Handle Cell Configuration internally)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> cell = tableView.dequeueReusableCellWithIdentifier(<span class="string">"ItemCell"</span>, forIndexPath: indexPath) <span class="keyword">as</span>! <span class="type">ItemCell</span></div><div class="line">        </div><div class="line">    <span class="keyword">let</span> item = items[indexPath.row] <span class="keyword">as</span>! <span class="type">Item</span></div><div class="line">    cell.nameLabel.text = myItem.name</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> cell</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在cell配置：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemCell</span>: <span class="title">UITableViewCell</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">configure</span><span class="params">(item: Item)</span></span> &#123;</div><div class="line">        <span class="keyword">self</span>.nameLabel.text = item.name</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改后：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> cell = tableView.dequeueReusableCellWithIdentifier(<span class="string">"ItemCell"</span>, forIndexPath: indexPath) <span class="keyword">as</span>! <span class="type">ItemCell</span></div><div class="line">    <span class="comment">// 内化cell的配置</span></div><div class="line">    cell.configure(items[indexPath.row] <span class="keyword">as</span>! <span class="type">Item</span>)</div><div class="line">        </div><div class="line">    <span class="keyword">return</span> cell</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-1-2-将Table的Data-Source分离成单独的类"><a href="#1-1-2-将Table的Data-Source分离成单独的类" class="headerlink" title="1.1.2 将Table的Data Source分离成单独的类"></a>1.1.2 将Table的Data Source分离成单独的类</h3><blockquote>
<p>分离TableView的数据源到别的类，分离数据model</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemDataSource</span>: <span class="title">NSObject</span>, <span class="title">UITableViewDataSource</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> items = [<span class="type">Item</span>(name:<span class="string">"1"</span>), <span class="type">Item</span>(name:<span class="string">"2"</span>), <span class="type">Item</span>(name:<span class="string">"3"</span>), <span class="type">Item</span>(name:<span class="string">"4"</span>)]</div><div class="line">    </div><div class="line">    <span class="comment">// MARK: - Table view data source</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">numberOfSections</span><span class="params">(<span class="keyword">in</span> tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">self</span>.items.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, </span></span></div><div class="line">                   cellForRowAt indexPath: IndexPath) -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell =</div><div class="line">        tableView.dequeueReusableCellWithIdentifier(<span class="string">"ItemCell"</span>, forIndexPath: indexPath) <span class="keyword">as</span>! <span class="type">ItemCell</span></div><div class="line">        </div><div class="line">        cell.configure(items[indexPath.row] <span class="keyword">as</span>! <span class="type">Item</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在viewcontroller中将<code>ItemDataSource</code>成为TableView的dataSource：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemListViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> dataSource = <span class="type">ItemDataSource</span>()</div><div class="line"> </div><div class="line">    <span class="comment">// MARK: - LIFECYCLE</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// 分离DataSource</span></div><div class="line">        tableView.dataSource = dataSource</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此外还可以将数据(items)部分再分离出去：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemStore</span> &#123;</span></div><div class="line">    <span class="keyword">private</span> let items = [Item(<span class="string">name:</span><span class="string">"1"</span>), Item(<span class="string">name:</span><span class="string">"2"</span>), Item(<span class="string">name:</span><span class="string">"3"</span>), Item(<span class="string">name:</span><span class="string">"4"</span>)]</div><div class="line"> </div><div class="line">    func allItems() -&gt; [String] &#123;</div><div class="line">        <span class="keyword">return</span> items</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemDataSource</span>: <span class="title">NSObject</span>, <span class="title">UITableViewDataSource</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 使用数据类</span></div><div class="line">    <span class="keyword">let</span> items = <span class="type">ItemStore</span>()</div><div class="line"> </div><div class="line">    <span class="comment">// MARK: - Table view data source</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">numberOfSectionsInTableView</span><span class="params">(tableView: UITableView)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> items.allItems()</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, </span></span></div><div class="line">                   cellForRowAtIndexPath indexPath: NSIndexPath)-&gt;<span class="type">UITableViewCell</span> &#123;</div><div class="line">       <span class="keyword">let</span> cell            = </div><div class="line">       tableView.dequeueReusableCellWithIdentifier(<span class="string">"ItemCell"</span>, forIndexPath: indexPath) </div><div class="line">       <span class="keyword">as</span>! <span class="type">ItemCell</span></div><div class="line">       </div><div class="line">       cell.configure(items.allItems()[indexPath.row])</div><div class="line">   </div><div class="line">       <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1-2-把网络服务的逻辑移到Model层"><a href="#1-2-把网络服务的逻辑移到Model层" class="headerlink" title="1.2 把网络服务的逻辑移到Model层"></a>1.2 把网络服务的逻辑移到Model层</h2><p>在view controller里，应该只是使用一个completionblock来调用这些方法，而把网络请求、错误处理、缓存处理交给Model来完成。</p>
<h1 id="2-Container-View-Controllers"><a href="#2-Container-View-Controllers" class="headerlink" title="2. Container View Controllers"></a>2. Container View Controllers</h1><blockquote>
<p>在Container View Controllers中加载多个View Controllers，使多个View Controllers单独维持各自的逻辑</p>
<p>Container View Controllers包含多个Controllers的view，这些view又被对应的Controllers自己维护</p>
</blockquote>
<p><img src="http://static.zybuluo.com/Sweetfish/ohiivm1kcwqxdx2ct8mp8l4s/image.png" alt="image.png-199.1kB"></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* add */</span></div><div class="line">let viewController = self<span class="selector-class">.storyBoard</span><span class="selector-class">.instantiateViewControllerWithIdentifier</span>(<span class="string">"test"</span>)</div><div class="line">self.addChildViewController(viewController)</div><div class="line"></div><div class="line">self<span class="selector-class">.view</span><span class="selector-class">.addSubview</span>(viewController.view)</div><div class="line">viewController.didMoveToParentViewController(self)</div><div class="line"></div><div class="line"><span class="comment">/* remove */</span></div><div class="line">let controller = self<span class="selector-class">.childViewControllers</span><span class="selector-class">.lastObject</span>()</div><div class="line">controller<span class="selector-class">.view</span><span class="selector-class">.removeFromSuperview</span>()</div><div class="line">controller.removeFromParentViewController()</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>Demo</strong><br>Snapchat的三方实现：<a href="https://github.com/Kesoyuh/simple-snapchat" target="_blank" rel="external">simple-snapchat</a></p>
</blockquote>
<h1 id="3-使用Notification-Centre-Delegation-和-Key-Value-Observing的区别"><a href="#3-使用Notification-Centre-Delegation-和-Key-Value-Observing的区别" class="headerlink" title="3.使用Notification Centre, Delegation 和 Key Value Observing的区别"></a>3.使用Notification Centre, Delegation 和 Key Value Observing的区别</h1><p><img src="http://static.zybuluo.com/Sweetfish/p6b9e9rzww2skg5z8gyjxrct/image.png" alt="image.png-524.9kB"></p>
<p>KVO举例：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> globalContext = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Participant</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> name = <span class="string">"Maria"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> participant = <span class="type">Participant</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        participant.addObserver(<span class="keyword">self</span>, </div><div class="line">                                forKeyPath: <span class="string">"name"</span>, </div><div class="line">                                options: .new, </div><div class="line">                                context: &amp;globalContext)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">observeValue</span><span class="params">(forKeyPath keyPath: String?, </span></span></div><div class="line">                               of object: Any?, change: [NSKeyValueChangeKey : Any]?, </div><div class="line">                               context: UnsafeMutableRawPointer?) &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> context == &amp;globalContext &#123;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> newValue = change?[<span class="type">NSKeyValueChangeKey</span>.newKey] &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"changed: <span class="subst">\(newValue)</span>"</span>)</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">super</span>.observeValue(forKeyPath: keyPath, of: object, change: change , context: context)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">deinit</span> &#123;</div><div class="line">        participant.removeObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"name"</span>, context: &amp;globalContext)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-MVVM"><a href="#4-MVVM" class="headerlink" title="4.MVVM"></a>4.MVVM</h1><p><img src="http://static.zybuluo.com/Sweetfish/mw0v69d5jl2keakwizx2vz8o/image.png" alt="image.png-333.2kB"></p>
<p>在MVC的基础上，增加View Model模块</p>
<p>举例：</p>
<ul>
<li>MVC</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import Foundation</div><div class="line"></div><div class="line">class Car &#123;</div><div class="line">    <span class="keyword">let</span> <span class="built_in">make</span>  : <span class="keyword">String</span></div><div class="line">    <span class="keyword">let</span> model : <span class="keyword">String</span></div><div class="line">    <span class="keyword">let</span> <span class="built_in">date</span>  : <span class="built_in">Date</span></div><div class="line">    </div><div class="line">    init(<span class="built_in">make</span> : <span class="keyword">String</span>, model : <span class="keyword">String</span>, <span class="built_in">date</span> : <span class="built_in">Date</span>) &#123;</div><div class="line">        self.<span class="built_in">make</span>  = <span class="built_in">make</span></div><div class="line">        self.model = model</div><div class="line">        self.<span class="built_in">date</span>  = <span class="built_in">date</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在viewcontroller中我们要显示一个日期和一段组合文字，在viewDidLoad中调用一下方法：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">func displayCar() &#123;</div><div class="line">    </div><div class="line">    let dateFormatter        = DateFormatter()</div><div class="line">    dateFormatter<span class="selector-class">.dateFormat</span> = <span class="string">"dd MMM yyyy"</span></div><div class="line">    self<span class="selector-class">.dateLabel</span><span class="selector-class">.text</span>      = dateFormatter.string(from: self<span class="selector-class">.car</span><span class="selector-class">.date</span>)</div><div class="line">    </div><div class="line">    self<span class="selector-class">.brandLabel</span><span class="selector-class">.text</span>     = <span class="string">"\(self.car.make) \(self.car.model)"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>MVVM</li>
</ul>
<p>增加CarViewModel模块:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarViewModel</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> car       : <span class="type">Car</span></div><div class="line">    <span class="keyword">let</span> brandText : <span class="type">String</span></div><div class="line">    <span class="keyword">let</span> dateText  : <span class="type">String</span></div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(car : <span class="type">Car</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.car       = car</div><div class="line">        <span class="keyword">self</span>.brandText = <span class="string">"<span class="subst">\(<span class="keyword">self</span>.car.make)</span> <span class="subst">\(<span class="keyword">self</span>.car.model)</span>"</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> dateFormatter        = <span class="type">NSDateFormatter</span>()</div><div class="line">        dateFormatter.dateFormat = <span class="string">"dd MMM yyyy"</span></div><div class="line">        <span class="keyword">self</span>.dateText            = dateFormatter.stringFromDate(<span class="keyword">self</span>.car.date)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>减轻viewcontroller的代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">displayCar</span><span class="params">()</span></span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.nameLabel.text      = <span class="keyword">self</span>.viewModel.brandText;</div><div class="line">    <span class="keyword">self</span>.birthdateLabel.text = <span class="keyword">self</span>.viewModel.dateText;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以适应单元测试：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">func testInitialization() &#123;</div><div class="line">    <span class="keyword">let</span> <span class="attr">car</span>          = Car()</div><div class="line">    <span class="keyword">let</span> <span class="attr">carViewModel</span> = CarViewModel(car: car)</div><div class="line">    </div><div class="line">    XCTAssertNotNil(carViewModel, <span class="string">"CarViewModel cannot be nil."</span>)</div><div class="line">    XCTAssertTrue(carViewModel.<span class="attr">car</span> === car, <span class="string">"Car should be equal to the car parameter"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 翻译 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 翻译 </tag>
            
            <tag> UITableView </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[译]A deep dive into Grand Central Dispatch in Swift]]></title>
      <url>/2017/06/15/20170615A%20deep%20dive%20into%20Grand%20Central%20Dispatch%20in%20Swift/</url>
      <content type="html"><![CDATA[<blockquote>
<p>来源: <a href="https://medium.com/@johnsundell/a-deep-dive-into-grand-central-dispatch-in-swift-dead7f6e1ca7" target="_blank" rel="external">A deep dive into Grand Central Dispatch in Swift</a></p>
</blockquote>
<h1 id="1-使用DispatchWorkItem执行一个可以取消的延迟任务"><a href="#1-使用DispatchWorkItem执行一个可以取消的延迟任务" class="headerlink" title="1.使用DispatchWorkItem执行一个可以取消的延迟任务"></a>1.使用DispatchWorkItem执行一个可以取消的延迟任务</h1><p><strong>案例：</strong>搜索栏监听用户的输入实时搜索</p>
<p>因为用户输入的很快，所以每隔0.25s搜索一次，如果0.25内用户有输入，则取消上次请求，重新请求。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchViewController</span>: <span class="title">UIViewController</span>, <span class="title">UISearchBarDelegate</span> </span>&#123;</div><div class="line">    <span class="comment">// We keep track of the pending work item as a property</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> pendingRequestWorkItem: <span class="type">DispatchWorkItem</span>?</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">searchBar</span><span class="params">(<span class="number">_</span> searchBar: UISearchBar, textDidChange searchText: String)</span></span> &#123;</div><div class="line">        <span class="comment">// 取消正在执行的workItem</span></div><div class="line">        pendingRequestWorkItem?.cancel()</div><div class="line"></div><div class="line">        <span class="comment">// 将任务包裹在workItem中</span></div><div class="line">        <span class="keyword">let</span> requestWorkItem = <span class="type">DispatchWorkItem</span> &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">            <span class="keyword">self</span>?.resultsLoader.loadResults(forQuery: searchText)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Save the new work item and execute it after 250 ms</span></div><div class="line">        <span class="comment">// 保存一个新的workIte并在250ms后执行</span></div><div class="line">        pendingRequestWorkItem = requestWorkItem</div><div class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + .milliseconds(<span class="number">250</span>),</div><div class="line">                                      execute: requestWorkItem)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>非常简单，没有使用Time 或 Operation</p>
</blockquote>
<h1 id="2-使用DispatchGroup组合和连接任务"><a href="#2-使用DispatchGroup组合和连接任务" class="headerlink" title="2.使用DispatchGroup组合和连接任务"></a>2.使用DispatchGroup组合和连接任务</h1><p><strong>案例：</strong>有三个数据请求任务，从本机、icloud、后台加载数据（并发），全部加载完后（同步），再合并数据</p>
<p>在dispatch group上使用enter() 和 leave() 方法保持任务的同步执行（ synchronize your tasks)</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// First, we create a group to synchronize our tasks</span></div><div class="line"><span class="keyword">let</span> <span class="keyword">group</span> = DispatchGroup()</div><div class="line"></div><div class="line"><span class="comment">// NoteCollection is a thread-safe collection class for storing notes</span></div><div class="line"><span class="keyword">let</span> collection = NoteCollection()</div><div class="line"></div><div class="line"><span class="comment">// The 'enter' method increments the group's task count…</span></div><div class="line"><span class="keyword">group</span>.enter()</div><div class="line">localDataSource.load &#123; notes <span class="keyword">in</span></div><div class="line">    collection.<span class="keyword">add</span>(notes)</div><div class="line">    <span class="comment">// …while the 'leave' methods decrements it</span></div><div class="line">    <span class="keyword">group</span>.leave()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">group</span>.enter()</div><div class="line">iCloudDataSource.load &#123; notes <span class="keyword">in</span></div><div class="line">    collection.<span class="keyword">add</span>(notes)</div><div class="line">    <span class="keyword">group</span>.leave()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">group</span>.enter()</div><div class="line">backendDataSource.load &#123; notes <span class="keyword">in</span></div><div class="line">    collection.<span class="keyword">add</span>(notes)</div><div class="line">    <span class="keyword">group</span>.leave()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// This closure will be called when the group's task count reaches 0</span></div><div class="line"><span class="comment">// 当group中任务数为0，执行以下任务</span></div><div class="line"><span class="keyword">group</span>.notify(queue: .main) &#123; [weak self] <span class="keyword">in</span></div><div class="line">    self?.render(collection)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>精简以上代码，给数组添加扩展</p>
</blockquote>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">extension Array where Element: DataSource &#123;</div><div class="line">    func load<span class="function"><span class="params">(completionHandler: @escaping (NoteCollection) -&gt; Void)</span> &#123;</span></div><div class="line">        <span class="title">let</span> <span class="title">group</span> = <span class="title">DispatchGroup</span><span class="params">()</span></div><div class="line">        <span class="title">let</span> <span class="title">collection</span> = <span class="title">NoteCollection</span><span class="params">()</span></div><div class="line"></div><div class="line">        // <span class="title">De-duplicate</span> <span class="title">the</span> <span class="title">synchronization</span> <span class="title">code</span> <span class="title">by</span> <span class="title">using</span> <span class="title">a</span> <span class="title">loop</span></div><div class="line">        // 使用循环来“解决”重复的同步代码</div><div class="line">        <span class="title">for</span> <span class="title">dataSource</span> <span class="title">in</span> <span class="title">self</span> &#123;</div><div class="line">            <span class="title">group</span>.<span class="title">enter</span><span class="params">()</span></div><div class="line">            <span class="title">dataSource</span>.<span class="title">load</span> &#123; <span class="title">notes</span> <span class="title">in</span></div><div class="line">                <span class="title">collection</span>.<span class="title">add</span><span class="params">(notes)</span></div><div class="line">                <span class="title">group</span>.<span class="title">leave</span><span class="params">()</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="title">group</span>.<span class="title">notify</span><span class="params">(queue: .main)</span> &#123;</div><div class="line">            <span class="title">completionHandler</span><span class="params">(collection)</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dataSources = [localDataSource, iCloudDataSource, backendDataSource]</div><div class="line"></div><div class="line">dataSources.load &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] collection <span class="keyword">in</span></div><div class="line">    <span class="keyword">self</span>?.render(collection)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="3-使用DispatchSemaphore来等待异步（asynchronous）任务"><a href="#3-使用DispatchSemaphore来等待异步（asynchronous）任务" class="headerlink" title="3.使用DispatchSemaphore来等待异步（asynchronous）任务"></a>3.使用DispatchSemaphore来等待异步（asynchronous）任务</h1><p>使用DispatchGroup来同步一些异步的任务，仍然存在异步性（to synchronize a group of asynchronous operations while still remaining asynchronous）。</p>
<p>DispatchSemaphore提供一种机制来同步“等待”一组异步任务执行完毕（synchronously wait for a group of asynchronous tasks）。</p>
<p>使用 wait() 和 signal()来增加和释放内部信号计数，调用wait()时会阻塞当前执行队列，知道调用signal()，收到一个siganl。</p>
<p><strong>案例：</strong>同步串行等待从本机、icloud、后台加载数据，前后阻塞，如果5s后三个请求没有结束，则报错</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> <span class="title">where</span> <span class="title">Element</span>: <span class="title">DataSource</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">load</span><span class="params">()</span></span> <span class="keyword">throws</span> -&gt; <span class="type">NoteCollection</span> &#123;</div><div class="line">        <span class="keyword">let</span> semaphore = <span class="type">DispatchSemaphore</span>(value: <span class="number">0</span>)</div><div class="line">        <span class="keyword">var</span> loadedCollection: <span class="type">NoteCollection</span>?</div><div class="line"></div><div class="line">        <span class="comment">// We create a new queue to do our work on, since calling wait() on</span></div><div class="line">        <span class="comment">// the semaphore will cause it to block the current queue</span></div><div class="line">        <span class="keyword">let</span> loadingQueue = <span class="type">DispatchQueue</span>.global()</div><div class="line"></div><div class="line">        loadingQueue.async &#123;</div><div class="line">            <span class="comment">// We extend 'load' to perform its work on a specific queue</span></div><div class="line">            <span class="keyword">self</span>.load(onQueue: loadingQueue) &#123; collection <span class="keyword">in</span></div><div class="line">                loadedCollection = collection</div><div class="line"></div><div class="line">                <span class="comment">// Once we're done, we signal the semaphore to unblock its queue</span></div><div class="line">                semaphore.signal()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Wait with a timeout of 5 seconds</span></div><div class="line">        <span class="comment">// 阻塞当前进程5s，收到signal不报错</span></div><div class="line">        semaphore.wait(timeout: .now() + <span class="number">5</span>)</div><div class="line"></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> collection = loadedCollection <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">NoteLoadingError</span>.timedOut</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> collection</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>调用</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dataSources = [localDataSource, iCloudDataSource, backendDataSource]</div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">let</span> collection = try dataSources.<span class="keyword">load</span>()</div><div class="line">    <span class="keyword">output</span>(collection)</div><div class="line">&#125; catch &#123;</div><div class="line">    <span class="keyword">output</span>(<span class="built_in">error</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-使用DispatchSource来监控文件的变化"><a href="#4-使用DispatchSource来监控文件的变化" class="headerlink" title="4. 使用DispatchSource来监控文件的变化"></a>4. 使用DispatchSource来监控文件的变化</h1><p>DispatchSource使用fileDescriptor和DispatchQueue来创建一个observation。</p>
<p>创建FileObserver，监控文件的“写入”，使用<code>DispatchSourceFileSystemObject</code>来创建source对象（使用<a href="https://github.com/johnsundell/files" target="_blank" rel="external">Files</a>来创建文件索引）：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileObserver</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> file: <span class="type">File</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> queue: <span class="type">DispatchQueue</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> source: <span class="type">DispatchSourceFileSystemObject</span>?</div><div class="line"></div><div class="line">    <span class="keyword">init</span>(file: <span class="type">File</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.file = file</div><div class="line">        <span class="keyword">self</span>.queue = <span class="type">DispatchQueue</span>(label: <span class="string">"com.myapp.fileObserving"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">start</span><span class="params">(closure: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">        <span class="comment">// We can only convert an NSString into a file system representation</span></div><div class="line">        <span class="comment">// fileSystemRepresentation只能使用NSString</span></div><div class="line">        <span class="keyword">let</span> path = (file.path <span class="keyword">as</span> <span class="type">NSString</span>)</div><div class="line">        <span class="keyword">let</span> fileSystemRepresentation = path.fileSystemRepresentation</div><div class="line"></div><div class="line">        <span class="comment">// Obtain a descriptor from the file system</span></div><div class="line">        <span class="keyword">let</span> fileDescriptor = open(fileSystemRepresentation, <span class="type">O_EVTONLY</span>)</div><div class="line"></div><div class="line">        <span class="comment">// Create our dispatch source</span></div><div class="line">        <span class="keyword">let</span> source = <span class="type">DispatchSource</span>.makeFileSystemObjectSource(fileDescriptor: fileDescriptor,</div><div class="line">                                                               eventMask: .write,</div><div class="line">                                                               queue: queue)</div><div class="line"></div><div class="line">        <span class="comment">// Assign the closure to it, and resume it to start observing</span></div><div class="line">        source.setEventHandler(handler: closure)</div><div class="line">        <span class="comment">// 开始监控</span></div><div class="line">        source.resume()</div><div class="line">        <span class="keyword">self</span>.source = source</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用FileObserver：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> observer = <span class="keyword">try</span> FileObserver(<span class="keyword">file</span>: <span class="keyword">file</span>)</div><div class="line"></div><div class="line">observer.start &#123;</div><div class="line">    <span class="keyword">print</span>(<span class="string">"File was changed"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 翻译 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 翻译 </tag>
            
            <tag> GCD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[译]Everything you need to know about iOS UITableView]]></title>
      <url>/2017/06/15/20170615Everything%20you%20need%20to%20know%20about%20iOS%20UITableView/</url>
      <content type="html"><![CDATA[<blockquote>
<p>来源 <a href="https://medium.com/@andycherkashyn/everything-you-need-to-know-about-ios-uitableview-79b766bf1a42" target="_blank" rel="external">Everything you need to know about iOS UITableView</a></p>
</blockquote>
<h1 id="1-将TableView分组"><a href="#1-将TableView分组" class="headerlink" title="1. 将TableView分组"></a>1. 将TableView分组</h1><p><img src="http://static.zybuluo.com/Sweetfish/n6d3ct73oaefnbrnjw3i40xq/image.png" alt="image.png-12.1kB"></p>
<p>建议1：将TableView分组以便使用不同的cell</p>
<blockquote>
<p>可扩展性高<br>当有新的行加入时，只需要修改对应的组即可，不用去全部修改</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.section</span> == ProfileSectionIndex &#123;</div><div class="line">    <span class="comment">// do something with profile</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.section</span> == InfoSectionIndex &#123;</div><div class="line">    int index = indexPath<span class="selector-class">.row</span></div><div class="line">    <span class="comment">// do something with info[index]</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.section</span> == FriendsSectionIndex &#123;</div><div class="line">    int index = indexPath<span class="selector-class">.row</span></div><div class="line">    <span class="comment">// do something with friends[index]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而不是使用以下的方法：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.row</span> == <span class="number">0</span> &#123;</div><div class="line">    <span class="comment">// profile</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.row</span> &gt; <span class="number">0</span> &amp;&amp; indexPath<span class="selector-class">.row</span> &lt; info<span class="selector-class">.count</span> + <span class="number">1</span> &#123;</div><div class="line">    int index = indexPath<span class="selector-class">.row</span> - <span class="number">1</span> <span class="comment">// I saw this so much times T_T</span></div><div class="line">    <span class="comment">// info section</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.row</span> &gt; info<span class="selector-class">.count</span> &#123;</div><div class="line">    int index = indexPath<span class="selector-class">.row</span> - info<span class="selector-class">.count</span> - <span class="number">1</span></div><div class="line">    <span class="comment">// friends section</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2-给sections-rows增加正确的标识"><a href="#2-给sections-rows增加正确的标识" class="headerlink" title="2. 给sections/rows增加正确的标识"></a>2. 给sections/rows增加正确的标识</h1><p>使用<code>枚举</code>来标识组名，而不是数字：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ProfileSections</span>: <span class="title">Int</span> &#123;</span></div><div class="line">    <span class="keyword">case</span> Profile = <span class="number">0</span>,</div><div class="line">    Info,</div><div class="line">    Friends</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>让代码更有意义，自解释性：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.section</span> == ProfileSections<span class="selector-class">.Profile</span><span class="selector-class">.rawValue</span> &#123;</div><div class="line">    <span class="comment">// Profile section</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.section</span> == ProfileSections<span class="selector-class">.Info</span><span class="selector-class">.rawValue</span> &#123;</div><div class="line">    <span class="comment">// Info section</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.section</span> == ProfileSections<span class="selector-class">.Friends</span><span class="selector-class">.rawValue</span> &#123;</div><div class="line">    <span class="comment">// Friends section</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以更灵活的增加和修改TableView：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ProfileSections</span>: <span class="title">Int</span> &#123;</span></div><div class="line">    <span class="keyword">case</span> Profile = <span class="number">0</span>,</div><div class="line">    Bio, <span class="regexp">//</span> + new section</div><div class="line">    Info,</div><div class="line">    Friends</div><div class="line">&#125;</div><div class="line">/<span class="regexp">/ ...</span></div><div class="line">if indexPath.section == ProfileSection.Bio.rawValue &#123;</div><div class="line">    /<span class="regexp">/ our new Bio section</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="3-使用cell的类名作为Reuse-Identifier"><a href="#3-使用cell的类名作为Reuse-Identifier" class="headerlink" title="3. 使用cell的类名作为Reuse Identifier"></a>3. 使用cell的类名作为Reuse Identifier</h1><p>增加代码的可读性：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注册ReuseIdentifier</span></div><div class="line">tableView.registerReuseIdentifier(ProfileCell<span class="selector-class">.self</span>, </div><div class="line">        forCellReuseIdentifier: <span class="string">"\(ProfileCell.self)"</span>)</div><div class="line">tableView.register(ProfileInfoCell<span class="selector-class">.self</span>, </div><div class="line">        forCellReuseIdentifier: <span class="string">"\(ProfileInfoCell.self)"</span>)</div><div class="line">tableView.register(ProfileContactCell<span class="selector-class">.self</span>, </div><div class="line">        forCellReuseIdentifier: <span class="string">"\(ProfileContactCell.self)"</span>)</div><div class="line">        </div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.section</span> == ProfileSections<span class="selector-class">.Profile</span><span class="selector-class">.rawValue</span> &#123;</div><div class="line">    let profileCell = tableView.dequeueReusableCell(</div><div class="line">            withIdentifier: <span class="string">"\(ProfileCell.self)"</span>, </div><div class="line">            <span class="keyword">for</span>: indexPath)</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.section</span> == ProfileSections<span class="selector-class">.Info</span><span class="selector-class">.rawValue</span> &#123;</div><div class="line">    let profileInfoCell = tableView.dequeueReusableCell(</div><div class="line">            withIdentifier: <span class="string">"\(ProfileInfoCell.self)"</span>, </div><div class="line">            <span class="keyword">for</span>: indexPath)</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.section</span> == ProfileSections<span class="selector-class">.Friends</span><span class="selector-class">.rawValue</span> &#123;</div><div class="line">    let profileContactCell = tableView.dequeueReusableCell(</div><div class="line">            withIdentifier: <span class="string">"\(ProfileContactCell.self)"</span>, </div><div class="line">            <span class="keyword">for</span>: indexPath)</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>当 replace/remove/add cell时，可以搜索高亮要修改的代码。</p>
</blockquote>
<h1 id="4-不要将数据的“更新逻辑”放在cellForRow方法里"><a href="#4-不要将数据的“更新逻辑”放在cellForRow方法里" class="headerlink" title="4. 不要将数据的“更新逻辑”放在cellForRow方法里"></a>4. 不要将数据的“更新逻辑”放在cellForRow方法里</h1><h1 id="4-1-放到cell内更新"><a href="#4-1-放到cell内更新" class="headerlink" title="4.1 放到cell内更新"></a>4.1 放到cell内更新</h1><p>给cell增加update方法来更新cell，不在cellForRow里增加代码（减少cell的处理逻辑）：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.section</span> == ProfileSections<span class="selector-class">.Profile</span><span class="selector-class">.rawValue</span> &#123;</div><div class="line">    <span class="comment">// ... </span></div><div class="line">    profileCell.update(profile: profile)</div><div class="line">    return profileCell</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.section</span> == ProfileSections<span class="selector-class">.Info</span><span class="selector-class">.rawValue</span> &#123;</div><div class="line">    <span class="comment">// ... </span></div><div class="line">    profileInfoCell.update(info: profile<span class="selector-class">.info</span>[indexPath.row])</div><div class="line">    return profileInfoCell</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> indexPath<span class="selector-class">.section</span> == ProfileSections<span class="selector-class">.Friends</span><span class="selector-class">.rawValue</span> &#123;</div><div class="line">    <span class="comment">// ... </span></div><div class="line">    profileContactCell.update(</div><div class="line">        contact: profile<span class="selector-class">.friends</span>[indexPath.row]</div><div class="line">    )</div><div class="line">    return profileInfoCell</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-2-将自定义cell的获取方法分离出cellForRow方法内"><a href="#4-2-将自定义cell的获取方法分离出cellForRow方法内" class="headerlink" title="4.2 将自定义cell的获取方法分离出cellForRow方法内"></a>4.2 将自定义cell的获取方法分离出cellForRow方法内</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取cell的方法</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">profileInfoCell</span><span class="params">(tableView: UITableView, indexPath: IndexPath)</span></span> </div><div class="line">        -&gt; <span class="type">ProfileInfoCell</span> &#123;</div><div class="line">    <span class="comment">// Dequeue, customize and return cell</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// So in cellForRow: method you can use it like:</span></div><div class="line"><span class="keyword">if</span> indexPath.section == <span class="type">ProfileSections</span>.<span class="type">Profile</span>.rawValue &#123;</div><div class="line">    <span class="comment">// 直接调用方法，获取cell</span></div><div class="line">    <span class="keyword">return</span> profileInfoCell(</div><div class="line">            tableView: tableView, </div><div class="line">            indexPath: indexPath</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="5-使用indexPathForSelectedRow-indexPathsForSelectedRows-方法"><a href="#5-使用indexPathForSelectedRow-indexPathsForSelectedRows-方法" class="headerlink" title="5. 使用indexPathForSelectedRow (indexPathsForSelectedRows) 方法"></a>5. 使用indexPathForSelectedRow (indexPathsForSelectedRows) 方法</h1><p>将选择某行后的操作逻辑放到新方法中，同时不用传递”行”这个参数：</p>
<p>使用前：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> indexPath.section == <span class="type">ProfileSections</span>.<span class="type">Friends</span>.rawValue &#123;</div><div class="line">        onFriendSelected(indexPath.row)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 需要传递index参数</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">onFriendSelected</span><span class="params">(index: Int)</span></span> &#123;</div><div class="line">    <span class="comment">// index</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用后：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> indexPath.section == <span class="type">ProfileSections</span>.<span class="type">Friends</span>.rawValue &#123;</div><div class="line">        onFriendSelected()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不需要传递index参数</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">onFriendSelected</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> index = tableView.indexPathForSelectedRow?.row</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="6-将DataSource-Delegate对象放到外部类"><a href="#6-将DataSource-Delegate对象放到外部类" class="headerlink" title="6. 将DataSource / Delegate对象放到外部类"></a>6. 将DataSource / Delegate对象放到外部类</h1><p>将UITableViewDataSource 和 UITableViewDelegate的实现放到其他类中：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> tableDataSource: <span class="type">ProfileTableDataSource</span></div><div class="line">    <span class="keyword">var</span> tableDelegate: <span class="type">ProfileTableDelegate</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// 外部类</span></div><div class="line">        tableDataSource = <span class="type">ProfileTableDataSource</span>(profile: profile)</div><div class="line">        tableDelegate = <span class="type">ProfileTableDelegate</span>()</div><div class="line">        <span class="comment">// delegate赋值</span></div><div class="line">        tableView.dataSource = tableDataSource</div><div class="line">        tableView.delegate = tableDelegate</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//...</span></div></pre></td></tr></table></figure>
<blockquote>
<p>增加代码可读性，也更方便修改</p>
</blockquote>
<ul>
<li>对不同的section，可以定义多个DataSource（<em>适用性不高</em>）</li>
</ul>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ProfileSections</span>: <span class="title">Int</span> &#123;</span></div><div class="line">    <span class="keyword">case</span> Profile = <span class="number">0</span>,</div><div class="line">    Info,</div><div class="line">    Friends</div><div class="line">&#125;</div><div class="line">let <span class="symbol">dataSources:</span> Array&lt;UITableViewDataSource&gt; = [</div><div class="line">    ProfileTableDataSource(),</div><div class="line">    ProfileInfoTableDataSource(),</div><div class="line">    ProfileFriendsTableDataSource()</div><div class="line">]</div></pre></td></tr></table></figure>
<p>但是定义在Controller里，Controller又要实现相关DataSource的逻辑，来判断使用那一个DataSource。</p>
<p>可以把这些逻辑放到分离的对象中：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let multiDataSource = MultiDataSource([</div><div class="line">    ProfileTableDataSource(),</div><div class="line">    ProfileInfoTableDataSource(),</div><div class="line">    ProfileFriendsTableDataSource()</div><div class="line">])</div></pre></td></tr></table></figure></p>
<h1 id="7-不要让TableView在用户操作时，假死"><a href="#7-不要让TableView在用户操作时，假死" class="headerlink" title="7. 不要让TableView在用户操作时，假死"></a>7. 不要让TableView在用户操作时，假死</h1><ul>
<li>确认<code>UITableViewCellSelectionStyle</code> 不是 <code>none</code>;</li>
<li>在didSelectRow方法内，调用了<code>tableView.deselectRow</code></li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tableView.deselectRow(<span class="string">at:</span> indexPath, <span class="string">animated:</span> <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<ul>
<li>不要关闭<code>Bounce</code>，因为这已经成为了用户习惯</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 翻译 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 翻译 </tag>
            
            <tag> UITableView </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MAC下iTerm主题配置]]></title>
      <url>/2017/04/21/20170421MAC%E4%B8%8BiTerm%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>Mac下iTerm的安装和主题配置。</p>
<a id="more"></a>
<p>首先安装<a href="https://www.iterm2.com/" target="_blank" rel="external">iTerm2</a></p>
<h1 id="1-Homebrew"><a href="#1-Homebrew" class="headerlink" title="1. Homebrew"></a>1. Homebrew</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Homebrew官网：<a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">http://brew.sh/index_zh-cn.html</a></p>
<p>Homebrew是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件，相当于linux下的apt-get、yum神器；Homebre可以在Mac上安装一些OS X没有的UNIX工具，Homebrew将这些工具统统安装到了<code>/usr/local/Cellar</code>目录中，并在<code>/usr/local/bin</code>中创建符号链接。</p>
<h2 id="Homebrew的安装"><a href="#Homebrew的安装" class="headerlink" title="Homebrew的安装"></a>Homebrew的安装</h2><p>Homebrew的安装很简单，只需在终端下输入如下指令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h2><p>Homebrew安装成功后，会自动创建目录 /usr/local/Cellar 来存放Homebrew安装的程序。 这时你在命令行状态下面就可以使用 brew 命令了.</p>
<blockquote>
<p>⚠️注意：如果在安装过程中返回400，可以在几分钟后尝试重新安装。</p>
</blockquote>
<h2 id="Homebrew的使用"><a href="#Homebrew的使用" class="headerlink" title="Homebrew的使用"></a>Homebrew的使用</h2><p>安装软件：brew install 软件名，例：brew install wget<br>搜索软件：brew search 软件名，例：brew search wget<br>卸载软件：brew uninstall 软件名，例：brew uninstall wget<br>更新所有软件：brew update</p>
<blockquote>
<p>⚠️通过 update 可以把包信息更新到最新，不过包更新是通过git命令，所以要先通过 brew install git 命令安装git。</p>
</blockquote>
<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>更新具体软件：brew upgrade 软件名 ，例：brew upgrade git<br>显示已安装软件：brew list<br>查看软件信息：brew info／home 软件名 ，例：brew info git ／ brew home git</p>
<blockquote>
<p>⚠️brew home指令是用浏览器打开官方网页查看软件信息</p>
</blockquote>
<p>查看那些已安装的程序需要更新： brew outdated<br>显示包依赖：brew reps</p>
<h1 id="2-安装Oh-My-Zsh"><a href="#2-安装Oh-My-Zsh" class="headerlink" title="2. 安装Oh My Zsh"></a>2. 安装Oh My Zsh</h1><p>把Zsh设置为当前用户的默认Shell:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh <span class="_">-s</span> /bin/zsh</div></pre></td></tr></table></figure>
<p>地址：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a></p>
<p>安装：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span></div><div class="line"></div><div class="line">--其他--</div><div class="line"></div><div class="line"><span class="comment">// 自动安装：</span></div><div class="line">wget <span class="string">https:</span><span class="comment">//github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span></div><div class="line"></div><div class="line"><span class="comment">// 手动安装：</span></div><div class="line">git clone <span class="string">git:</span><span class="comment">//github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span></div><div class="line"></div><div class="line"><span class="comment">// 覆盖配置文件</span></div><div class="line">cp <span class="regexp">~/.oh-my-zsh/</span>templates<span class="regexp">/zshrc.zsh-template ~/</span>.zshrc</div></pre></td></tr></table></figure>
<h2 id="2-1-替换OMZ主题"><a href="#2-1-替换OMZ主题" class="headerlink" title="2.1 替换OMZ主题"></a>2.1 替换OMZ主题</h2><p>主题大全：<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a></p>
<blockquote>
<p>oh my zsh提供了数十种主题，相关文件在<code>~/.oh-my-zsh/themes</code>目录下</p>
</blockquote>
<p>选择<code>agnster</code>主题<a href="https://github.com/agnoster/agnoster-zsh-theme" target="_blank" rel="external">https://github.com/agnoster/agnoster-zsh-theme</a></p>
<p>修改主题配置：</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vim ~<span class="string">/.zshrc</span></div><div class="line">直接在配置文件<span class="string">.zshrc</span>中设置主题为<span class="string">"agnoster"</span></div><div class="line"></div><div class="line">ZSH_THEME=<span class="string">"agnoster"</span></div></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/Sweetfish/h1qg036ridvjbeql3njbc816/WX20170118-225229@2x.png" alt="WX20170118-225229@2x.png-74.9kB"></p>
<h2 id="2-2-安装Powerline字体"><a href="#2-2-安装Powerline字体" class="headerlink" title="2.2 安装Powerline字体"></a>2.2 安装Powerline字体</h2><p>安装Powerline-patched font:<a href="https://github.com/powerline/fonts" target="_blank" rel="external">https://github.com/powerline/fonts</a></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 克隆</span></div><div class="line">git clone git@github<span class="selector-class">.com</span>:powerline/fonts<span class="selector-class">.git</span></div><div class="line"><span class="comment">// 安装</span></div><div class="line">./install<span class="selector-class">.sh</span></div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line"><span class="comment">// pip安装</span></div><div class="line">pip install powerline-status</div><div class="line"></div><div class="line"><span class="comment">// 如果没有，则先执行安装pip指令</span></div><div class="line">sudo easy_install pip</div></pre></td></tr></table></figure>
<h2 id="2-3-设置iTerm字体"><a href="#2-3-设置iTerm字体" class="headerlink" title="2.3 设置iTerm字体"></a>2.3 设置iTerm字体</h2><p><img src="http://static.zybuluo.com/Sweetfish/m1gl1w60012bm3i98xu40m8v/image_1b6p2s184135019k6vj46l5vlhs.png" alt="image_1b6p2s184135019k6vj46l5vlhs.png-246kB"><br><img src="http://static.zybuluo.com/Sweetfish/7xlcub38jci4lqrqo085wls7/image_1b6p2ujj6hnib5t13474fps719.png" alt="image_1b6p2ujj6hnib5t13474fps719.png-216.1kB"></p>
<h2 id="2-4-更改iterm的主题"><a href="#2-4-更改iterm的主题" class="headerlink" title="2.4 更改iterm的主题"></a>2.4 更改iterm的主题</h2><p>选择solarized：<a href="http://ethanschoonover.com/solarized/files/solarized.zip" target="_blank" rel="external">下载</a></p>
<p>说明：<a href="https://github.com/altercation/ethanschoonover.com/blob/master/projects/solarized/README.md" target="_blank" rel="external">https://github.com/altercation/ethanschoonover.com/blob/master/projects/solarized/README.md</a></p>
<p>查看对应程序文件夹下的readme文件，查看安装方式：<br><img src="http://static.zybuluo.com/Sweetfish/2tz9okg1pbr9k1nxu8cviet3/image_1b6p3d9bm1bj21s66r8un6n4rk1m.png" alt="image_1b6p3d9bm1bj21s66r8un6n4rk1m.png-103.8kB"></p>
<p>打开iTerm的偏好设置，导入、或直接选择<code>Solarized Dark</code>主题：<br><img src="http://static.zybuluo.com/Sweetfish/hnb2caxvt7p9mlr1c9d7e9ii/image_1b6p3h12g1a59bc8131l43i93a23.png" alt="image_1b6p3h12g1a59bc8131l43i93a23.png-266.4kB"></p>
<p>主题配置完成：<br><img src="http://static.zybuluo.com/Sweetfish/p2asfc2v84173ii5vrrj6ee7/image_1b6p44anhvjg1r9a7cmg2mroa9.png" alt="image_1b6p44anhvjg1r9a7cmg2mroa9.png-127.3kB"></p>
<h2 id="2-5-增加指令高亮效果——插件zsh-syntax-highlighting"><a href="#2-5-增加指令高亮效果——插件zsh-syntax-highlighting" class="headerlink" title="2.5 增加指令高亮效果——插件zsh-syntax-highlighting"></a>2.5 增加指令高亮效果——插件zsh-syntax-highlighting</h2><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="external">zsh-syntax-highlighting</a></p>
<p>指令高亮效果作用是当用户输入正确命令时指令会绿色高亮，错误时命令红色高亮.</p>
<p>以下针对OMZ安装：</p>
<p>（1）clone仓库：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/zsh-users/</span>zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span><span class="regexp">/plugins/</span>zsh-syntax-highlighting</div></pre></td></tr></table></figure></p>
<p>（2）在 <code>~/.zshrc</code>中添加插件名称：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">plugins</span>=( [plugins...] zsh-syntax-highlighting)</div></pre></td></tr></table></figure></p>
<p>（3）source一下<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// Source ~/.zshrc <span class="keyword">to</span> take <span class="keyword">changes</span> into accoun<span class="variable">t:</span></div><div class="line"><span class="keyword">source</span> ~/.zshrc</div></pre></td></tr></table></figure></p>
<p>错误的命令显示红色：<br><img src="http://static.zybuluo.com/Sweetfish/p5v3sjf5g2s4we527hwev7ij/image_1b6p5kqdj1fn7177r143g1lugcfe2a.png" alt="image_1b6p5kqdj1fn7177r143g1lugcfe2a.png-14.5kB"></p>
<h2 id="2-5-OMZ配置"><a href="#2-5-OMZ配置" class="headerlink" title="2.5 OMZ配置"></a>2.5 OMZ配置</h2><p><a href="http://macshuo.com/?p=676" target="_blank" rel="external">终极 Shell</a><br><a href="http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html" target="_blank" rel="external">oh-my-zsh配置你的zsh提高shell逼格终极选择</a><br><a href="http://wdxtub.com/2016/02/18/oh-my-zsh/" target="_blank" rel="external">zsh 全程指南++</a></p>
<h1 id="3-添加全屏配置iTerm"><a href="#3-添加全屏配置iTerm" class="headerlink" title="3. 添加全屏配置iTerm"></a>3. 添加全屏配置iTerm</h1><p><strong>用处：</strong>设置一个快捷键假设为F12，在任意场合，按下快捷键F12就弹出终端，输入一些命令执行后，再按一下F12终端就自动隐藏。</p>
<p>设置过程如下：</p>
<p>（1）系统已经默认将F12分配给Show Dashboard，需要先取消这个设置。</p>
<p>打开System Preferences -&gt; 选择Keyboard，切换到Shortcuts这个Tab下，点击Mission Control，取消对应F12的快捷键。<br><img src="http://static.zybuluo.com/Sweetfish/ko67yl0h72fkqf6tfgyntkz6/image_1b6p53aj51jp7118s17ahtnll0jm.png" alt="image_1b6p53aj51jp7118s17ahtnll0jm.png-249.2kB"></p>
<p>（2）打开iTerm的Preferences 在ProfilesTab里面，点击下面的[+]添加一个新的profile，给新的profile命名为fish（任意起个名称），下面会用到。<br><img src="http://static.zybuluo.com/Sweetfish/imab69dphivy5pb6rxh301vm/image_1b6p55ogjjmu17pi6sdtqm1ole13.png" alt="image_1b6p55ogjjmu17pi6sdtqm1ole13.png-251.3kB"></p>
<p>（3）再切换到WindowTab下，将Style、Screen和Space这3个值设置和下图一样。<br><img src="http://static.zybuluo.com/Sweetfish/m22dr92dzvgp7hm3l7oqof9f/image_1b6p59ho41p6h16uo79ss0h38k1g.png" alt="image_1b6p59ho41p6h16uo79ss0h38k1g.png-275.7kB"></p>
<p>（4）再切换到KeysTab下，设置如下图所示的Hotkey F12。<br><img src="http://static.zybuluo.com/Sweetfish/758fyzv3bhl1s2mxarqp6fwf/image_1b6p5c7jl4va1n7fri1d0p136h1t.png" alt="image_1b6p5c7jl4va1n7fri1d0p136h1t.png-358.8kB"></p>
<p>按下F12体验神奇吧！</p>
]]></content>
      
        <categories>
            
            <category> iTerm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
            <tag> iTerm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS中AF添加本地HTTPS校验]]></title>
      <url>/2017/03/30/20170330iOS%E4%B8%ADAF%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0HTTPS%E6%A0%A1%E9%AA%8C/</url>
      <content type="html"><![CDATA[<p>在AF中添加本地证书验证。</p>
<a id="more"></a>
<h1 id="1-转换证书格式"><a href="#1-转换证书格式" class="headerlink" title="1. 转换证书格式"></a>1. 转换证书格式</h1><p>转换证书格式[crt –&gt; der]：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -in \*xxx.crt -out xxx.der -outform DER</div></pre></td></tr></table></figure>
<h1 id="2-添加证书到App工程中"><a href="#2-添加证书到App工程中" class="headerlink" title="2. 添加证书到App工程中"></a>2. 添加证书到App工程中</h1><p><img src="http://static.zybuluo.com/Sweetfish/3o2shgw6qhly9zq5vfe8c1av/image_1bcervsns4asrs31pcm2srhclm.png" alt="image_1bcervsns4asrs31pcm2srhclm.png-60.9kB"></p>
<h1 id="3-在AF中添加验证规则"><a href="#3-在AF中添加验证规则" class="headerlink" title="3. 在AF中添加验证规则"></a>3. 在AF中添加验证规则</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 加载本地 证书xxx.cer</span></div><div class="line"><span class="built_in">NSString</span> *certFilePath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"xxx"</span> ofType:<span class="string">@"der"</span>];</div><div class="line"><span class="built_in">NSData</span> *certData = [<span class="built_in">NSData</span> dataWithContentsOfFile:certFilePath];</div><div class="line"><span class="built_in">NSSet</span> *certSet = [<span class="built_in">NSSet</span> setWithObject:certData];</div><div class="line">AFSecurityPolicy *securityPolicy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModePublicKey];</div><div class="line"><span class="comment">// 是否允许,NO-- 不允许无效的证书</span></div><div class="line">[securityPolicy setAllowInvalidCertificates:<span class="literal">YES</span>];</div><div class="line">securityPolicy.validatesDomainName = <span class="literal">NO</span>;</div><div class="line"><span class="comment">// 设置证书</span></div><div class="line">[securityPolicy setPinnedCertificates:certSet];</div><div class="line"></div><div class="line"><span class="comment">// 规则设置需要校验HTTPS，所以初始化时要传入url判断是否是https</span></div><div class="line">AFHTTPSessionManager *manager = [[AFHTTPSessionManager manager] initWithBaseURL:[<span class="built_in">NSURL</span> URLWithString:url]];</div><div class="line">manager.securityPolicy = securityPolicy;</div><div class="line">manager.requestSerializer.cachePolicy = <span class="built_in">NSURLRequestReloadIgnoringLocalCacheData</span>;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用BurpSuite抓取iOS的HTTPS报文(测试中间人攻击)]]></title>
      <url>/2017/03/29/20170329%E4%BD%BF%E7%94%A8BurpSuite%E6%8A%93%E5%8F%96iOS%E7%9A%84HTTPS%E6%8A%A5%E6%96%87(%E6%B5%8B%E8%AF%95%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB)/</url>
      <content type="html"><![CDATA[<p>使用Burp Suite来测试iOS上HTTPS中间人攻击。</p>
<a id="more"></a>
<h1 id="1-Burp-Suite安装"><a href="#1-Burp-Suite安装" class="headerlink" title="1. Burp Suite安装"></a>1. Burp Suite安装</h1><p>从Burp Suite官网下载<code>免费版</code>软件，本测试在MAC OS平台进行，故下载MAC版（Windows和linux平台也支持，自行选择下载）。</p>
<p><img src="http://static.zybuluo.com/Sweetfish/63bzix0m9b372n80t4ziy26y/image_1bcbtf03i1udm1phq1ajb1j3a1cn79.png" alt="image_1bcbtf03i1udm1phq1ajb1j3a1cn79.png-95.6kB"></p>
<h1 id="2-Burp-Suite启动"><a href="#2-Burp-Suite启动" class="headerlink" title="2. Burp Suite启动"></a>2. Burp Suite启动</h1><p>因为是免费版，直接点击下一步即可：</p>
<p><img src="http://static.zybuluo.com/Sweetfish/r611jwzqqtccobsf9ii9d07g/b1.png" alt="b1.png-127.5kB"><br><img src="http://static.zybuluo.com/Sweetfish/hoxaphkvygtfzpny2ld20jyd/b2.png" alt="b2.png-111.5kB"></p>
<h1 id="3-Burp-Suite配置"><a href="#3-Burp-Suite配置" class="headerlink" title="3. Burp Suite配置"></a>3. Burp Suite配置</h1><p>（1）点击<code>Proxy</code>-&gt;<code>Options</code><br>（2）选中第一项，点击<code>Edit</code></p>
<p><img src="http://static.zybuluo.com/Sweetfish/3qmh7froa4fx7447cv2db2c8/b3.png" alt="b3.png-197.4kB"></p>
<p>（3）选择<code>All interfaces</code></p>
<p><img src="http://static.zybuluo.com/Sweetfish/zu4ho008lbrexq6iswwgakd6/b4.png" alt="b4.png-85.6kB"></p>
<p>（4）关闭排除规则，抓取全部的包。在<code>Proxy</code>-&gt;<code>Intercept</code>中，点击按钮，使其显示<code>Intercept is off</code></p>
<p><img src="http://static.zybuluo.com/Sweetfish/lxaaocg6h1ui8hr5t1xnvip8/bb.png" alt="bb.png-50.2kB"></p>
<p>（5）查看本机MAC的IP地址，下个步骤使用</p>
<p><img src="http://static.zybuluo.com/Sweetfish/qw1iculrz7714vkhlnctvhq0/b5.png" alt="b5.png-139.3kB"></p>
<h1 id="4-配置iPhone"><a href="#4-配置iPhone" class="headerlink" title="4. 配置iPhone"></a>4. 配置iPhone</h1><p>（1）让iPhone和MAC连接同一个WiFi<br>（2）在WiFi详情中配置HTTP代理，服务器地址为步骤3中<code>MAC的IP地址</code>，端口为<code>8080</code></p>
<p><img src="http://static.zybuluo.com/Sweetfish/tij83u4yewfx8xv7vfqzojx8/image_1bcbu0tpbqpn1916hmf1p691kao2u.png" alt="image_1bcbu0tpbqpn1916hmf1p691kao2u.png-119.2kB"></p>
<p>此时，已经可以使用Burp Suite来监听手机的HTTP请求，但是无法监听HTTPS请求，需要制作CA让手机信任，来解密被加密的HTTPS请求。</p>
<h1 id="5-Burp-Suite证书制作"><a href="#5-Burp-Suite证书制作" class="headerlink" title="5. Burp Suite证书制作"></a>5. Burp Suite证书制作</h1><p>（1）生成证书：进入<code>Proxy</code>-&gt;<code>Options</code>，点击<code>Regenerat CA certificate</code></p>
<p><img src="http://static.zybuluo.com/Sweetfish/iprq8rsrvnlug7gxphne1d49/b6.png" alt="b6.png-86.5kB"></p>
<p>（2）导出证书：</p>
<p><img src="http://static.zybuluo.com/Sweetfish/ypk5nqtmidfn9lqd1ro4mpj8/b7.png" alt="b7.png-76.9kB"><br><img src="http://static.zybuluo.com/Sweetfish/kylrh5hdzp804l55dc0ft1wp/b8.png" alt="b8.png-96kB"></p>
<p>导出证书为<code>Der</code>格式：</p>
<p><img src="http://static.zybuluo.com/Sweetfish/szs6ltgr27q3qtugwhfmlvoh/b9.png" alt="b9.png-67.2kB"><br><img src="http://static.zybuluo.com/Sweetfish/9qomigifs9omdtaos1dyhyue/b10.png" alt="b10.png-51.4kB"></p>
<p>（3）发送证书到iPhone（因为是免费版，只能通过邮件发送）</p>
<p><img src="http://static.zybuluo.com/Sweetfish/gd446g4hi5k5rltdohp5awws/b11.png" alt="b11.png-138.5kB"></p>
<p>将证书发送手机上的邮箱：</p>
<p><img src="http://static.zybuluo.com/Sweetfish/c5mbndkf8hsywufdg8p21jx3/b12.png" alt="b12.png-51.9kB"></p>
<h1 id="6-手机安装证书"><a href="#6-手机安装证书" class="headerlink" title="6. 手机安装证书"></a>6. 手机安装证书</h1><p>（1）打开邮件，点击附件，安装证书</p>
<p><img src="http://static.zybuluo.com/Sweetfish/stneaxrqupwftvyduss0ozrs/image_1bcbv2ik34uk1msd7ri10vq1a9666.png" alt="image_1bcbv2ik34uk1msd7ri10vq1a9666.png-104.6kB"></p>
<p><img src="http://static.zybuluo.com/Sweetfish/rj58q6b3x2274b4cwcw271zl/image_1bcbv3as3db6qmhbr817jc18ml6j.png" alt="image_1bcbv3as3db6qmhbr817jc18ml6j.png-147.8kB"></p>
<p>（2）安装完成，Burp Suite可以监听手机的HTTPS请求</p>
<h1 id="7-Burp-Suite监听HTTPS"><a href="#7-Burp-Suite监听HTTPS" class="headerlink" title="7. Burp Suite监听HTTPS"></a>7. Burp Suite监听HTTPS</h1><p>（1）：进入<code>Proxy</code>-&gt;<code>HTTP history</code>，可以查收手机的HTTPS请求：</p>
<p><img src="http://static.zybuluo.com/Sweetfish/x66cluqoys7evtvslhwoiyqr/WX20170513-201842@2x.png" alt="WX20170513-201842@2x.png-596.1kB"></p>
<p>（2）查看POST登录请求如下，POST请求的body全部明文可见：</p>
<p><img src="http://static.zybuluo.com/Sweetfish/n1asmsnlt4gedv5nel6t6jom/WX20170513-201640@2x.png" alt="WX20170513-201640@2x.png-890.4kB"></p>
<h1 id="8-测试完成后删除证书"><a href="#8-测试完成后删除证书" class="headerlink" title="8. 测试完成后删除证书"></a>8. 测试完成后删除证书</h1><p>（1）在手机的<code>设置</code>-&gt;<code>通用</code>-&gt;<code>描述文件</code>中删除安装的测试证书。</p>
<p><img src="http://static.zybuluo.com/Sweetfish/lekcmuwjtudhx8i79no5x2c6/image_1bcbvmebvke0v1orm13f11f317o.png" alt="image_1bcbvmebvke0v1orm13f11f317o.png-163.8kB"></p>
<p>（2）将手机WIFI详情中的HTTP代理关闭</p>
]]></content>
      
        <categories>
            
            <category> HTTPS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> HTTPS </tag>
            
            <tag> BurpSuite </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[App之间相互拉起交互数据]]></title>
      <url>/2017/03/27/20170327App%E4%B9%8B%E9%97%B4%E7%9B%B8%E4%BA%92%E6%8B%89%E8%B5%B7%E4%BA%A4%E4%BA%92%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<p>App使用第三方登录的基本原理研究。</p>
<a id="more"></a>
<p><img src="http://static.zybuluo.com/Sweetfish/axqny6fkmifuvwktoxce1l06/App%E7%9B%B8%E4%BA%92%E6%8B%89%E8%B5%B7%E4%BA%A4%E4%BA%92.png" alt="App相互拉起交互.png-87.6kB"></p>
<h1 id="1-授权登录流程简述"><a href="#1-授权登录流程简述" class="headerlink" title="1. 授权登录流程简述"></a>1. 授权登录流程简述</h1><p>目前主流App为了节约用户注册的繁琐步骤，多采用主流账户体系（如微信、微博等）的授权登录方式让用户登录自己的App，简化流程、方便快捷。</p>
<p>授权的基本流程如下：（模拟场景[应用A请求应用B授权登录]）</p>
<ul>
<li>（1）应用A首先在应用B的<code>开发平台</code>注册自己的应用，获取<code>开发平台</code>授予的AppID和App Secret</li>
<li>（2）用户手机打开应用A，点击“应用B授权登录”，此事从应用A跳转到应用B的授权页面（并携带参数应用的<code>AppID</code> 和 请求授权的访问域<code>scope</code>）</li>
<li>（3）应用B首先判断应用A的AppID是否合法，不合法则授权结束</li>
<li>（4）用户此时在应用B选择是否同意授权（不同意、取消页面、或超时 被认为授权失败）</li>
<li>（5）用户同意之后，跳转回应用A（携带参数<code>授权是否成功ErrCode</code>、<code>授权码code</code>）</li>
<li>（6）如果授权成功（<code>ErrCode=0</code>），此时应用A获得应用B的授权码<code>code</code></li>
<li>（7）应用A使用 <code>AppID</code> <code>App Secret</code> <code>code</code>参数向应用B的<code>开发平台（后台）</code>请求授权令牌token（access_token, refresh_token）</li>
</ul>
<p>基本时序图如下所示：</p>
<p><img src="http://static.zybuluo.com/Sweetfish/2026aihi3i1tgeuag4xnlg27/WX20170513-204321@2x.png" alt="WX20170513-204321@2x.png-174.5kB"></p>
<h1 id="2-授权登录安全性说明"><a href="#2-授权登录安全性说明" class="headerlink" title="2. 授权登录安全性说明"></a>2. 授权登录安全性说明</h1><p>App之间的授权登录流程，遵循Auth2.0协议。</p>
<ul>
<li>应用B通过<code>AppID</code>来判断应用A是否可以被授权</li>
<li>应用B的 <strong>授权后台</strong> 通过<code>AppID</code> <code>App Secret</code> <code>code</code>来判断应用A是否可以获取token</li>
</ul>
<blockquote>
<p>关于授权访问域<code>scope</code>：<br>授权访问域主要用来界定应用授权之后，可以获取到的账户信息的范围（如用户个人信息，用户头像），访问域中<code>可选</code>的范围会交由用户判断选择。</p>
</blockquote>
<p><img src="http://static.zybuluo.com/Sweetfish/wn3j163abwgm6bkg17sra486/image_1bc9cbclnph65os303t851g689.png" alt="image_1bc9cbclnph65os303t851g689.png-294.3kB"></p>
]]></content>
      
        <categories>
            
            <category> App </category>
            
        </categories>
        
        
        <tags>
            
            <tag> App </tag>
            
            <tag> 三方登录 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[侧滑返回引起ViewController强引用]]></title>
      <url>/2017/02/28/20170228%E4%BE%A7%E6%BB%91%E8%BF%94%E5%9B%9E%E5%BC%95%E8%B5%B7ViewController%E5%BC%BA%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>监听iOS的侧滑手势，解决Controller循环应用。</p>
<a id="more"></a>
<h3 id="1-背景："><a href="#1-背景：" class="headerlink" title="1.背景："></a>1.背景：</h3><p>一般在viewController的定义中，对于导航栏，我们会自定义返回按钮，同时定义按钮的点击事件，用该点击事件处理viewController一些属性的销毁工作，必须停止timer。</p>
<h3 id="2-问题："><a href="#2-问题：" class="headerlink" title="2.问题："></a>2.问题：</h3><p>但是此时viewController依然支持“侧滑返回”，但是侧滑返回事件没有调用“返回按钮的点击事件”，导致viewController的一些属性的销毁工作没有执行。</p>
<ul>
<li>例如：<br>侧滑返回时，timer没有被销毁，因为timer一般强引用viewController（self），所以导致viewController在侧滑返回时，没有被销毁。</li>
</ul>
<h3 id="3-解决方法："><a href="#3-解决方法：" class="headerlink" title="3.解决方法："></a>3.解决方法：</h3><p>添加滑动返回手势代理<code>&lt;UIGestureRecognizerDelegate&gt;</code>，判断滑动返回事件调用，触发viewController销毁：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这个方法是在手势将要激活前调用：返回YES允许侧滑手势的激活，返回NO不允许侧滑手势的激活</span></div><div class="line">- (<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIGestureRecognizer</span> *)gestureRecognizer</div><div class="line">&#123;</div><div class="line">    <span class="comment">//首先在这确定是不是我们需要管理的侧滑返回手势</span></div><div class="line">    <span class="keyword">if</span> (gestureRecognizer == <span class="keyword">self</span>.navigationController.interactivePopGestureRecognizer) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span> == <span class="keyword">self</span>.navigationController.topViewController) &#123;</div><div class="line">            DeNSLog(<span class="string">@"侧滑返回"</span>);</div><div class="line">            <span class="comment">//&#123;</span></div><div class="line">            <span class="comment">//  处理销毁</span></div><div class="line">            <span class="comment">//&#125;</span></div><div class="line">            <span class="comment">//如果 currentShowVC 存在说明堆栈内的控制器数量大于 1 ，允许激活侧滑手势</span></div><div class="line">            <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果 currentShowVC 不存在，禁用侧滑手势。如果在根控制器中不禁用侧滑手势，而且不小心触发了侧滑手势，会导致存放控制器的堆栈混乱，直接的效果就是你发现你的应用假死了，点哪都没反应，感兴趣是神马效果的朋友可以自己试试 = =。</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//这里就是非侧滑手势调用的方法啦，统一允许激活</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 侧滑 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MAC上git版本管理软件SourceTree的使用]]></title>
      <url>/2016/10/08/20161008MAC%E4%B8%8Agit%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6SourceTree%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Mac下使用SourceTree的基本方法。</p>
<a id="more"></a>
<h2 id="1-背景原因"><a href="#1-背景原因" class="headerlink" title="1.背景原因"></a>1.背景原因</h2><p>在目前Xcode8的git版本控制中，当存在代码冲突时，Xcode不能正常pull远程代码，只能手动pull然后再合并，这样代码合并效率低下，从而影响开发效率。在此提出使用第三方SourceTree免费软件来替代Xcode自带的版本控制。以下是对SourceTree的介绍和使用方法。</p>
<blockquote>
<p>现状参考链接:<br><a href="https://segmentfault.com/q/1010000007010390" target="_blank" rel="external">SegmentFault</a><br><a href="http://stackoverflow.com/questions/39579893/xcode-8-source-control-does-not-show-conflicts" target="_blank" rel="external">stackoverflow</a></p>
</blockquote>
<h2 id="2-SourceTree介绍"><a href="#2-SourceTree介绍" class="headerlink" title="2.SourceTree介绍"></a>2.SourceTree介绍</h2><p>SourceTree是一款基于界面的git版本控制软件，支持add、commit、clone、push、pull 和merge等操作，操作也比较简单。<br><img src="http://static.zybuluo.com/Sweetfish/wqclucg1u1o175vmkb4ho63z/Snip20160928_2.png" alt="Snip20160928_2.png-280.5kB"></p>
<h2 id="3-SourceTree的安装和打开"><a href="#3-SourceTree的安装和打开" class="headerlink" title="3.SourceTree的安装和打开"></a>3.SourceTree的安装和打开</h2><p>首先去官网<a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">(链接)</a>下载SourceTree:<br><img src="http://static.zybuluo.com/Sweetfish/zobi8uqkd804xqhilhlo1c3r/Snip20160928_1.png" alt="Snip20160928_1.png-55.3kB"><br>打开压缩包点击即可打开SourceTree。</p>
<p>打开SourceTree之后，需要登录Atlassian账号来激活SourceTree。可以使用Google账号直接关联登录，如下图：<br><img src="http://static.zybuluo.com/Sweetfish/wij0qifo0uz6kmtizfrx7znu/Snip20160927_1.png" alt="Snip20160927_1.png-82.4kB"></p>
<p><img src="http://static.zybuluo.com/Sweetfish/gmxd85vdplv3rkbz5iq7a5k7/Snip20160927_2.png" alt="Snip20160927_2.png-74kB"><br><img src="http://static.zybuluo.com/Sweetfish/eenxlifp5wq7hrr0aaf69lri/Snip20160927_3.png" alt="Snip20160927_3.png-46.3kB"><br><img src="http://static.zybuluo.com/Sweetfish/xdnnjpbo7tw523itji72slex/Snip20160927_4.png" alt="Snip20160927_4.png-61.5kB"><br><img src="http://static.zybuluo.com/Sweetfish/ogxse96dgc0misky0em2zo76/Snip20160927_5.png" alt="Snip20160927_5.png-76.3kB"></p>
<p>配置完之后，就出现SourceTree的仓库管理界面：<br><img src="http://static.zybuluo.com/Sweetfish/p1n38ffvbcoj7amrhfjzzfve/Snip20160927_6.png" alt="Snip20160927_6.png-40.6kB"></p>
<h2 id="4-SourceTree打开git仓库"><a href="#4-SourceTree打开git仓库" class="headerlink" title="4.SourceTree打开git仓库"></a>4.SourceTree打开git仓库</h2><h3 id="4-1-从URL克隆"><a href="#4-1-从URL克隆" class="headerlink" title="4.1 从URL克隆"></a>4.1 从URL克隆</h3><p>即将一个远程代码库克隆到本地：<br><img src="http://static.zybuluo.com/Sweetfish/4smk8kh51p9usm7xtwth8avf/Snip20160929_3.png" alt="Snip20160929_3.png-47.6kB"></p>
<p>添加git仓库的URL链接，选择本地存放位置以及项目名称：<br><img src="http://static.zybuluo.com/Sweetfish/atwc6w2xk1pf6ew8pmk1cdha/Snip20160929_4.png" alt="Snip20160929_4.png-41.4kB"></p>
<h3 id="4-2-打开本地代码库"><a href="#4-2-打开本地代码库" class="headerlink" title="4.2 打开本地代码库"></a>4.2 打开本地代码库</h3><p>直接打开本地已经存在的git仓库：<br><img src="http://static.zybuluo.com/Sweetfish/evkth7j9vab034wsdl567jgq/Snip20160929_8.png" alt="Snip20160929_8.png-37.4kB"></p>
<p>选择本地仓库(项目工程)的文件夹，打开即可：<br><img src="http://static.zybuluo.com/Sweetfish/h7ht11ty1cs2ijjwprki46jc/Snip20160929_7.png" alt="Snip20160929_7.png-75.7kB"></p>
<p>双击对应的仓库就可以打开该仓库的代码管理：<br><img src="http://static.zybuluo.com/Sweetfish/hlhbqtobqavwrg011tb6ni54/Snip20160927_12.png" alt="Snip20160927_12.png-165.8kB"></p>
<h2 id="5-SourceTree-git界面介绍"><a href="#5-SourceTree-git界面介绍" class="headerlink" title="5.SourceTree git界面介绍"></a>5.SourceTree git界面介绍</h2><p><img src="http://static.zybuluo.com/Sweetfish/1msghy4b77k6c816tfh0kkxv/Snip20160927_42.png" alt="Snip20160927_42.png-252.6kB"><br>如上图，SourceTreegit支持中文界面，基本命令对比如下：</p>
<ul>
<li>提交：git commit</li>
<li>拉取：git pull</li>
<li>推送：git push</li>
<li>抓取：git fetch</li>
</ul>
<p>主界面中还有一个<code>未暂存文件</code>和<code>已暂存文件</code>，勾选<code>未暂存文件</code>会自动将<code>未暂存文件</code>添加到<code>已暂存文件</code>区域，就是一次<code>git add</code>命令。</p>
<p>左边栏可以看到本地和远程的分支，还有本地文件的工作状态。</p>
<h2 id="6-代码提交"><a href="#6-代码提交" class="headerlink" title="6.代码提交"></a>6.代码提交</h2><p>1.勾选代码，添加(add)到暂存区域<br><img src="http://static.zybuluo.com/Sweetfish/mma1e7bsaen8dht3q8va05uc/Snip20160927_21.png" alt="Snip20160927_21.png-290kB"></p>
<p>代码查看：<br><img src="http://static.zybuluo.com/Sweetfish/81y289wocsrtx7lkh3d4674m/Snip20160927_20.png" alt="Snip20160927_20.png-277.9kB"></p>
<p>2.提交(commit)代码到本地仓库</p>
<ul>
<li>点击左上提交按钮</li>
<li>写提交日志</li>
<li>点击右下提交按钮</li>
<li>之后再点击“推送”按钮推送到远程</li>
</ul>
<p><img src="http://static.zybuluo.com/Sweetfish/yyxi60bcz7pvjszv4bsqtb8j/Snip20160927_24.png" alt="Snip20160927_24.png-283.7kB"><br><img src="http://static.zybuluo.com/Sweetfish/0ljnbqrfmw99f1994hwx1tdl/Snip20160927_15.png" alt="Snip20160927_15.png-128.4kB"><br><img src="http://static.zybuluo.com/Sweetfish/4c4ue71n74wupc6581i9v9cf/Snip20160930_9.png" alt="Snip20160930_9.png-125.5kB"></p>
<p>3.撤销添加<br>即从暂存区到未暂存区，直接取消文件勾选即可：<br><img src="http://static.zybuluo.com/Sweetfish/6vk3pf1ntuen5xsq2s3ww917/Snip20160927_22.png" alt="Snip20160927_22.png-150.6kB"></p>
<p>4.放弃修改<br>即放弃该文件的修改，恢复到修改前：<br><img src="http://static.zybuluo.com/Sweetfish/1t2zdcip4p9ht1t5mpj5jjb2/Snip20160927_26.png" alt="Snip20160927_26.png-255.8kB"></p>
<h2 id="7-代码拉取和冲突解决"><a href="#7-代码拉取和冲突解决" class="headerlink" title="7.代码拉取和冲突解决"></a>7.代码拉取和冲突解决</h2><h3 id="7-1-拉取代码"><a href="#7-1-拉取代码" class="headerlink" title="7.1 拉取代码"></a>7.1 拉取代码</h3><p>点击“拉取”按钮，拉取远程仓库代码，确定拉取的远程<code>分支</code>：<br><img src="http://static.zybuluo.com/Sweetfish/n23pe5t1nkj8c6a6n6ajylei/Snip20160930_11.png" alt="Snip20160930_11.png-228.7kB"></p>
<h3 id="7-2-冲突解决"><a href="#7-2-冲突解决" class="headerlink" title="7.2 冲突解决"></a>7.2 冲突解决</h3><p>1.冲突出现<br>如果拉取出现冲突，会弹出“合并冲突”的提醒弹窗，说明代码有冲突，需要人工合并代码。<br><img src="http://static.zybuluo.com/Sweetfish/mw0qda5orkryq0jaiou8179f/Snip20160927_29.png" alt="Snip20160927_29.png-271.9kB"></p>
<p>冲突文件的标记前面会出现”<code>感叹号❗</code>️”冲突标记：<br><img src="http://static.zybuluo.com/Sweetfish/udw61m1vhm36rfvrhe5iup4p/Snip20160927_30.png" alt="Snip20160927_30.png-294.3kB"></p>
<p>2.合并冲突<br><code>右键点击文件--&gt;解决冲突--&gt;启动外部合并工具</code>，会调用FileMerge工具对代码进行合并。(<strong>此外也可以在Xcode或其他第三方工具如Beyond Compare中手动修改后保存</strong>)<br><img src="http://static.zybuluo.com/Sweetfish/iwqket06ijas4ba77maa0wxy/Snip20160927_32.png" alt="Snip20160927_32.png-314kB"></p>
<p>FileMerge默认使用远程替换本地的代码(即打开FileMerge后，代码默认已经被它合并了，但还需要人工观察合并是否正确)：</p>
<ul>
<li>FileMerge中用<code>箭头→</code>指向的代码替换原代码，作为最新代码；</li>
<li><code>红色</code>的箭头表明是冲突代码；</li>
<li>最下面的区域显示的是最后合并的代码效果；</li>
</ul>
<p><img src="http://static.zybuluo.com/Sweetfish/oyy47bib8yivobaek574wyo8/Snip20160927_36.png" alt="Snip20160927_36.png-309.6kB"><br><img src="http://static.zybuluo.com/Sweetfish/4b2zl6458iq86am9ekoijqg9/Snip20160927_33.png" alt="Snip20160927_33.png-298.6kB"></p>
<p>手动修改方式：</p>
<ul>
<li>选中箭头</li>
<li>在右下角选择操作方式<ul>
<li>Choose left：选择左边的代码</li>
<li>Choose right：选择右边的代码</li>
<li>Choose both(left first)：全部选择左边的代码</li>
<li>Choose both(right first)：全部选择右边的代码</li>
<li>Choose neither：都不选，保留冲突前的代码</li>
</ul>
</li>
<li>合并完成之后，点击软件<code>File菜单--&gt;save merge</code>保存合并代码。</li>
</ul>
<p><img src="http://static.zybuluo.com/Sweetfish/25xyjnomw6g7po9xphm81i8u/Snip20160927_35.png" alt="Snip20160927_35.png-213.9kB"><br><img src="http://static.zybuluo.com/Sweetfish/c66es0wxzz0sa3b7r9k7yqta/Snip20160927_37.png" alt="Snip20160927_37.png-95.5kB"></p>
<p>提交冲突文件就和<code>代码提交</code>一样了。<br><img src="http://static.zybuluo.com/Sweetfish/4ur8ibzo7gwv0wyocv9tb7bk/Snip20160927_38.png" alt="Snip20160927_38.png-278.7kB"></p>
<p>此外，代码冲突会产生一些<code>备份文件</code>需要<strong>手动删除</strong>，或者不勾选提交。可以通过git命令不产生备份文件<br><img src="http://static.zybuluo.com/Sweetfish/d0ghdph1am5mg0gty2ku8b5h/Snip20160927_39.png" alt="Snip20160927_39.png-262.2kB"></p>
<p><strong>多余的.orig文件删除：</strong><br>这个是由于git自身造成的，它会在解决冲突后生成一个原来冲突的备份，通过命令可以去掉<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --<span class="keyword">global</span> mergetool.keepBackup <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h2 id="8-其他"><a href="#8-其他" class="headerlink" title="8.其他"></a>8.其他</h2><h3 id="8-1-拓展阅读"><a href="#8-1-拓展阅读" class="headerlink" title="8.1 拓展阅读"></a>8.1 拓展阅读</h3><p><a href="https://segmentfault.com/a/1190000002951154" target="_blank" rel="external">「GIT SourceTree冲突」解决方案</a></p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> Xcode </tag>
            
            <tag> SourceTree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS中JS与OC相互调用的方式]]></title>
      <url>/2016/09/19/20160919iOS%E4%B8%ADJS%E4%B8%8EOC%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>介绍iOS下JS与OC交互的方式。</p>
<a id="more"></a>
<blockquote>
<p>整理自 Haley_Wong<a href="http://www.jianshu.com/nb/5513092" target="_blank" rel="external">《JS与OC交互》</a></p>
</blockquote>
<h2 id="0-Hybrid-App简要介绍"><a href="#0-Hybrid-App简要介绍" class="headerlink" title="0.Hybrid App简要介绍"></a>0.Hybrid App简要介绍</h2><p>讲述Hybrid App，要先了解Native App和Web App的定义。</p>
<ul>
<li>Native App是指针对不同的手机操作系统要采用不同的语言和框架进行开发，例如Java(Android), Objective-C(iOS)等；</li>
<li>Web App即是HTML5 APP框架开发模式，使用HTML5,CSS3以及JavaScript以及服务器端语言来完成开发，Web App具有跨平台的优势。</li>
</ul>
<p>根据定义显而易见得出两种开发模式的优劣势，Native App可以利用系统的所有特性，因此做出杰出的性能，然而每次功能升级都必须重新打包、审核再上架，平均浪费近两周的时间。而反观Web App就没有这样的问题，其缺点在于Web语言无法访问很多系统特性，性能不高。</p>
<p>鉴于二者各有的优劣势，顺理成章的衍生出了介于中间的开发模式Hybrid。其特点是在原生应用中嵌入一个浏览器组件，然后通过某种方式，让原生代码和网页能够双向通讯，结果就是可以在需要原生功能的时候使用原生功能，而适合放在网页端的部分就放在服务器上。某种程度上利用到了两者的优势。另一个优势就是，由于网页技术在iOS和Android上是一样的，所以网页的这部分也就天然可以跨平台了。</p>
<p>目前中国70%以上的Native APP都已经混合了Web技术，例如淘宝、大众点评、58同城、去哪儿等App都嵌入了大量的HTML5页面。让部分功能在WebView技术基础上缩短开发周期、实现灵活业务调整。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/336955-bc55977ae28d8ff9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<table>
<thead>
<tr>
<th style="text-align:center">特性</th>
<th style="text-align:center">Native</th>
<th style="text-align:center">Web</th>
<th style="text-align:center">Hybrid</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">开发语言</td>
<td style="text-align:center">原生语言(OC Java)</td>
<td style="text-align:center">网页语言(HTML+CSS+JS)</td>
<td style="text-align:center">网页语言+原生语言</td>
</tr>
<tr>
<td style="text-align:center">跨平台性</td>
<td style="text-align:center">低</td>
<td style="text-align:center">高</td>
<td style="text-align:center">高</td>
</tr>
<tr>
<td style="text-align:center">设备访问能力</td>
<td style="text-align:center">高</td>
<td style="text-align:center">中</td>
<td style="text-align:center">高</td>
</tr>
<tr>
<td style="text-align:center">开发成本</td>
<td style="text-align:center">高</td>
<td style="text-align:center">低</td>
<td style="text-align:center">中</td>
</tr>
<tr>
<td style="text-align:center">用户体验</td>
<td style="text-align:center">很好</td>
<td style="text-align:center">差</td>
<td style="text-align:center">较好</td>
</tr>
<tr>
<td style="text-align:center">安装体验</td>
<td style="text-align:center">高(商店)</td>
<td style="text-align:center">中(浏览器)</td>
<td style="text-align:center">高(商店)</td>
</tr>
<tr>
<td style="text-align:center">升级灵活度</td>
<td style="text-align:center">低</td>
<td style="text-align:center">高</td>
<td style="text-align:center">中</td>
</tr>
<tr>
<td style="text-align:center">向后兼容</td>
<td style="text-align:center">差</td>
<td style="text-align:center">好</td>
<td style="text-align:center">好</td>
</tr>
<tr>
<td style="text-align:center">维护更新</td>
<td style="text-align:center">复杂</td>
<td style="text-align:center">简单</td>
<td style="text-align:center">简单</td>
</tr>
<tr>
<td style="text-align:center">高级图形</td>
<td style="text-align:center">高</td>
<td style="text-align:center">中</td>
<td style="text-align:center">中</td>
</tr>
</tbody>
</table>
<h2 id="1-目前JS与OC相互调用的方式"><a href="#1-目前JS与OC相互调用的方式" class="headerlink" title="1.目前JS与OC相互调用的方式"></a>1.目前JS与OC相互调用的方式</h2><p>目前主要的JS与OC相互调用方式主要有如下6种：</p>
<ol>
<li>在JS 中做一次URL跳转，然后在OC中拦截跳转。（这里分为UIWebView 和 WKWebView两种，UIWebView兼容iOS 6）</li>
<li>利用WKWebView 的MessageHandler。</li>
<li>利用系统库JavaScriptCore，来做相互调用。（iOS 7推出）</li>
<li>利用第三方库WebViewJavascriptBridge。</li>
<li>利用第三方cordova库，以前叫PhoneGap。（这是一个库平台的库）</li>
<li>当下盛行的React Native。</li>
</ol>
<p>由于目前平台库cordova和React Native依然处于发展中，学习成本高，可以在后续的学习中继续研究。</p>
<p>以下是对1-4中介绍的方式进行对比：</p>
<table>
<thead>
<tr>
<th style="text-align:center">特性</th>
<th style="text-align:center">URL拦截</th>
<th style="text-align:center">MessageHandler</th>
<th style="text-align:center">JavaScriptCore</th>
<th style="text-align:center">WebViewJavascriptBridge</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">优点</td>
<td style="text-align:center">1.实现简单；2.适合接口少、轻量级的</td>
<td style="text-align:center">1.不用拦截URL；2.参数传递简单；3.JS中的代码简单、规范</td>
<td style="text-align:center">JS调用Native方法时，参数的传递更方便</td>
<td style="text-align:center">比URL拦截方式传递参数更方便</td>
</tr>
<tr>
<td style="text-align:center">缺点</td>
<td style="text-align:center">1.参数传递和解析复杂；2.安全性较低</td>
<td style="text-align:center">WKWebView中的方法，只适配iOS8</td>
<td style="text-align:center">适配iOS7</td>
<td style="text-align:center">1.第三方库；2.做一次交互，需要执行的js与原生的交互步骤较多，至少有两次；3.需要花时间理解WebViewJavascriptBridge的原理和使用步骤；4.底层也是通过URL拦截的方式实现</td>
</tr>
</tbody>
</table>
<p><strong>初步考虑，App兼容iOS7选择JavaScriptCore方式，App只兼容iOS8以上，可以采用WKWebView，并使用MessageHandler方式。</strong></p>
<p>接下来分别介绍1-4中方法。</p>
<hr>
<h2 id="2-拦截URL"><a href="#2-拦截URL" class="headerlink" title="2.拦截URL"></a>2.拦截URL</h2><p><img src="http://upload-images.jianshu.io/upload_images/336955-3bc7ae3619c68651.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>URL拦截的方式是用JS发起一个假的URL请求，然后利用UIWebView的代理方法拦截这次请求，解析URL的Scheme，根据Scheme来区分是否是调用OC原生方法还是正常的网页跳转，然后再做相应的处理。</p>
<h3 id="2-1-UIWwbView中的实现"><a href="#2-1-UIWwbView中的实现" class="headerlink" title="2.1 UIWwbView中的实现"></a>2.1 UIWwbView中的实现</h3><h4 id="创建UIWebView，加载本地HTML"><a href="#创建UIWebView，加载本地HTML" class="headerlink" title="创建UIWebView，加载本地HTML"></a>创建UIWebView，加载本地HTML</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">self.webView = [[UIWebView alloc] initWithFrame:self.view.frame];</div><div class="line">self.webView.delegate = self;</div><div class="line">NSURL *htmlURL = [[NSBundle mainBundle] URLForResource:@&quot;index.html&quot; withExtension:nil];</div><div class="line"></div><div class="line">NSURLRequest *request = [NSURLRequest requestWithURL:htmlURL];</div><div class="line"></div><div class="line">// 如果不想要webView 的回弹效果</div><div class="line">self.webView.scrollView.bounces = NO;</div><div class="line">// UIWebView 滚动的比较慢，这里设置为正常速度</div><div class="line">self.webView.scrollView.decelerationRate = UIScrollViewDecelerationRateNormal;</div><div class="line">[self.webView loadRequest:request];</div><div class="line">[self.view addSubview:self.webView];</div></pre></td></tr></table></figure>
<h4 id="本地HTML文件"><a href="#本地HTML文件" class="headerlink" title="本地HTML文件"></a>本地HTML文件</h4><p>本地HTML中定义一个按钮，点击按钮触发调用js发起假的URL请求。</p>
<p>JS发起自定义Scheme的URL请求的方法：</p>
<ul>
<li>JS将需要调用的OC函数，写在自定义URL中。</li>
<li>OC代码中通过拦截该Scheme来判断是否是自定义的URL。</li>
<li>解析URL后面的参数，判断调用方法和调用参数。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"获取定位"</span> onclick=<span class="string">"locationClick()"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">//发起假的URL请求</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadURL</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> iFrame;</div><div class="line">    iFrame = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</div><div class="line">    iFrame.setAttribute(<span class="string">"src"</span>, url);</div><div class="line">    iFrame.setAttribute(<span class="string">"style"</span>, <span class="string">"display:none;"</span>);</div><div class="line">    iFrame.setAttribute(<span class="string">"height"</span>, <span class="string">"0px"</span>);</div><div class="line">    iFrame.setAttribute(<span class="string">"width"</span>, <span class="string">"0px"</span>);</div><div class="line">    iFrame.setAttribute(<span class="string">"frameborder"</span>, <span class="string">"0"</span>);</div><div class="line">    <span class="built_in">document</span>.body.appendChild(iFrame);</div><div class="line">    <span class="comment">// 发起请求后这个iFrame就没用了，所以把它从dom上移除掉</span></div><div class="line">    iFrame.parentNode.removeChild(iFrame);</div><div class="line">    iFrame = <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncAlert</span>(<span class="params">content</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">               alert(content);</div><div class="line">               &#125;,<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">locationClick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    loadURL(<span class="string">"haleyAction://getLocation"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//OC回调js的函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setLocation</span>(<span class="params">location</span>) </span>&#123;</div><div class="line">    asyncAlert(location);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"returnValue"</span>).value = location;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JS中调用OC方法的时，传参数到OC中，就像一个get请求一样，把参数放在后面：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shareClick</span><span class="params">()</span> </span>&#123;</div><div class="line">    loadURL(<span class="string">"haleyAction://shareClick?title=测试分享的标题&amp;content=测试分享的内容&amp;url=http://www.baidu.com"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所有的参数都在URL的query中，在OC中处理时，先通过<code>&amp;</code>将字符串拆分，在通过<code>=</code>把参数拆分成key和实际的值。</p>
<h4 id="OC中拦截URL"><a href="#OC中拦截URL" class="headerlink" title="OC中拦截URL"></a>OC中拦截URL</h4><p>在UIWebView有一个代理方法，可以拦截到每一个链接的Request。return YES，webView就会加载这个链接；return NO，webView就不会加载这个连接。因此，需要在这个拦截的代理方法中处理自定义的URL，从中取出需要调用的OC函数名称。</p>
<p>这里通过判断scheme是否是自定义的，以此拦截掉自定义的URL请求。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - UIWebViewDelegate</span></div><div class="line">- (<span class="built_in">BOOL</span>)webView:(<span class="built_in">UIWebView</span> *)webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> *)request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSURL</span> *URL = request.URL;</div><div class="line">    <span class="built_in">NSString</span> *scheme = [URL scheme];</div><div class="line">    <span class="keyword">if</span> ([scheme isEqualToString:<span class="string">@"haleyaction"</span>]) &#123;</div><div class="line">        [<span class="keyword">self</span> handleCustomAction:URL];</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="OC回调JS"><a href="#OC回调JS" class="headerlink" title="OC回调JS"></a>OC回调JS</h4><p>在UIWwbView处理自定义URL请求，以及通过UIWebVIew的方法回调JS代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - private method</span></div><div class="line">- (<span class="keyword">void</span>)handleCustomAction:(<span class="built_in">NSURL</span> *)URL</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *host = [URL host];</div><div class="line">    <span class="keyword">if</span> ([host isEqualToString:<span class="string">@"getLocation"</span>]) &#123;</div><div class="line">        [<span class="keyword">self</span> getLocation];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)getLocation</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 获取位置信息</span></div><div class="line">    <span class="comment">//......</span></div><div class="line">    <span class="comment">// 将结果返回给JS</span></div><div class="line">    <span class="comment">// 将被调用的JS的函数名和参数写入字符串</span></div><div class="line">    <span class="built_in">NSString</span> *jsStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"setLocation('%@')"</span>,<span class="string">@"myNewLocation"</span>];</div><div class="line">    <span class="comment">//回调JS代码</span></div><div class="line">    [<span class="keyword">self</span>.webView stringByEvaluatingJavaScriptFromString:jsStr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>利用<code>[webView stringByEvaluatingJavaScriptFromString:@&quot;var arr = [3, 4, &#39;abc&#39;];&quot;];</code>,可以往HMTL的JS环境中插入全局变量、JS方法等。</p>
</blockquote>
<h3 id="2-2WKWebView实现方式"><a href="#2-2WKWebView实现方式" class="headerlink" title="2.2WKWebView实现方式"></a>2.2WKWebView实现方式</h3><p>由于UIWebView比较耗内存，性能上不太好，而苹果在<code>iOS8</code>中推出了WKWebView。同样的用WKWebView也可以拦截URL，做JS与OC交互。WKWebView与UIWebView拦截URL的处理方式基本一样。除了代理方法和WKWebView的使用不太一样。</p>
<p>WKWebView的创建有几点不同：</p>
<ol>
<li>初始化多了configuration参数，当然这个参数也可以不传，直接使用默认的设置。</li>
<li>WKWebView的代理有两个navigationDelegate和UIDelegate。我们要拦截URL，就要通过navigationDelegate的一个代理方法来实现。如果在HTML中要使用alert等弹窗，就必须得实现UIDelegate的相应代理方法。</li>
<li>在iOS9之前，WKWebView加载本地HTML会有一些问题。（不能加载本地HTML，或者部分CSS/本地图片加载不了等）</li>
</ol>
<h4 id="WKWebView的创建："><a href="#WKWebView的创建：" class="headerlink" title="WKWebView的创建："></a>WKWebView的创建：</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">WKWebViewConfiguration</span> *configuration = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</div><div class="line">configuration.userContentController = [<span class="built_in">WKUserContentController</span> new];</div><div class="line"></div><div class="line"><span class="built_in">WKPreferences</span> *preferences = [<span class="built_in">WKPreferences</span> new];</div><div class="line">preferences.javaScriptCanOpenWindowsAutomatically = <span class="literal">YES</span>;</div><div class="line">preferences.minimumFontSize = <span class="number">30.0</span>;</div><div class="line">configuration.preferences = preferences;</div><div class="line"></div><div class="line"><span class="keyword">self</span>.webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.frame configuration:configuration];</div><div class="line"></div><div class="line"><span class="built_in">NSString</span> *urlStr = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"index.html"</span> ofType:<span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSURL</span> *fileURL = [<span class="built_in">NSURL</span> fileURLWithPath:urlStr];</div><div class="line">[<span class="keyword">self</span>.webView loadFileURL:fileURL allowingReadAccessToURL:fileURL];</div><div class="line"></div><div class="line"><span class="keyword">self</span>.webView.navigationDelegate = <span class="keyword">self</span>;</div><div class="line">[<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.webView];</div></pre></td></tr></table></figure>
<h4 id="WKWebView中拦截URL的方法："><a href="#WKWebView中拦截URL的方法：" class="headerlink" title="WKWebView中拦截URL的方法："></a>WKWebView中拦截URL的方法：</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - WKNavigationDelegate</span></div><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">WKWebView</span> *)webView decidePolicyForNavigationAction:(<span class="built_in">WKNavigationAction</span> *)navigationAction decisionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">WKNavigationActionPolicy</span>))decisionHandler</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSURL</span> *URL = navigationAction.request.URL;</div><div class="line">    <span class="built_in">NSString</span> *scheme = [URL scheme];</div><div class="line">    <span class="keyword">if</span> ([scheme isEqualToString:<span class="string">@"haleyaction"</span>]) &#123;</div><div class="line">        [<span class="keyword">self</span> handleCustomAction:URL];</div><div class="line">        decisionHandler(<span class="built_in">WKNavigationActionPolicyCancel</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    decisionHandler(<span class="built_in">WKNavigationActionPolicyAllow</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>实现这个代理方法，必须得调用decisionHandler这个block，否则会导致app 崩溃。block参数是个枚举类型，WKNavigationActionPolicyCancel代表取消加载，相当于UIWebView的代理方法<code>return NO</code>的情况；WKNavigationActionPolicyAllow代表允许加载，相当于UIWebView的代理方法中<code>return YES</code>的情况。</p>
</blockquote>
<h4 id="WKWebView中OC调用JS方法："><a href="#WKWebView中OC调用JS方法：" class="headerlink" title="WKWebView中OC调用JS方法："></a>WKWebView中OC调用JS方法：</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)getLocation</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 获取位置信息</span></div><div class="line"></div><div class="line">    <span class="comment">// 将结果返回给js</span></div><div class="line">    <span class="built_in">NSString</span> *jsStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"setLocation('%@')"</span>,<span class="string">@"myNewLocation"</span>];</div><div class="line">    [<span class="keyword">self</span>.webView evaluateJavaScript:jsStr completionHandler:^(<span class="keyword">id</span> _Nullable result, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@----%@"</span>,result, error);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>evaluateJavaScript:completionHandler:没有返回值，JS 执行成功还是失败会在completionHandler 中返回。所以使用这个API 就可以避免执行耗时的JS，或者alert 导致界面卡住的问题。</p>
</blockquote>
<h2 id="3-MessageHandler"><a href="#3-MessageHandler" class="headerlink" title="3.MessageHandler"></a>3.MessageHandler</h2><p><img src="http://upload-images.jianshu.io/upload_images/336955-42d5a8d00a81e280.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>利用WKWebView的新特性MessageHandler来实现JS调用原生方法。</p>
<h3 id="3-1MessageHandler的好处"><a href="#3-1MessageHandler的好处" class="headerlink" title="3.1MessageHandler的好处"></a>3.1MessageHandler的好处</h3><ol>
<li>在JS中写起来简单，不用再用创建URL的方式那么麻烦了。</li>
<li>JS传递参数更方便。使用拦截URL的方式传递参数，只能把参数拼接在后面，如果遇到要传递的参数中有特殊字符，如&amp;、=、?等，必须得转换，否则参数解析肯定会出错。</li>
<li>使用MessageHandler就可以避免特殊字符引起的问题。</li>
</ol>
<p>例如传递的url是这样的：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="regexp">//</span>www.baidu.com<span class="regexp">/share/</span>openShare.htm?share_uuid=shdfxdfdsfsdf&amp;name=<span class="number">1234556</span></div></pre></td></tr></table></figure>
<p>使用拦截URL的JS调用方式：</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">loadURL<span class="params">("firstClick://shareClick?<span class="attr">title</span>=分享的标题&amp;<span class="attr">content</span>=分享的内容&amp;<span class="attr">url</span>=链接地址&amp;<span class="attr">imagePath</span>=图片地址")</span>;</div></pre></td></tr></table></figure>
<p>将上面的url 放入链接地址这里后，难以区分share_uuid是其他参数，还是url里附带的参数。</p>
<h3 id="3-2实现原理"><a href="#3-2实现原理" class="headerlink" title="3.2实现原理"></a>3.2实现原理</h3><p>WKWebView初始化时，有一个参数叫configuration，它是WKWebViewConfiguration类型的参数，而WKWebViewConfiguration有一个属性叫userContentController，它又是WKUserContentController类型的参数。WKUserContentController对象有一个方法- addScriptMessageHandler:name:，我把这个功能简称为MessageHandler。</p>
<p><code>- addScriptMessageHandler:name:</code>有两个参数，第一个参数是userContentController的代理对象，第二个参数是JS里发送postMessage的对象。</p>
<p>所以要使用MessageHandler功能，就必须要实现WKScriptMessageHandler协议。</p>
<p>在该API的描述里可以看到在JS中的使用方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.webkit.messageHandlers.&lt;name&gt;.postMessage(&lt;messageBody&gt;)</div><div class="line">//其中&lt;name&gt;，就是上面方法里的第二个参数`name`。</div><div class="line">//例如我们调用API的时候第二个参数填@"Share"，那么在JS里就是:</div><div class="line">//window.webkit.messageHandlers.Share.postMessage(&lt;messageBody&gt;)</div><div class="line">//&lt;messageBody&gt;是一个键值对，键是body，值可以有多种类型的参数。</div><div class="line">// 在`WKScriptMessageHandler`协议中，我们可以看到mssage是`WKScriptMessage`类型，有一个属性叫body。</div><div class="line">// 而注释里写明了body 的类型：Allowed types are NSNumber, NSString, NSDate, NSArray, NSDictionary, and NSNull.</div></pre></td></tr></table></figure>
<h3 id="3-3OC中配置MessageHandler"><a href="#3-3OC中配置MessageHandler" class="headerlink" title="3.3OC中配置MessageHandler"></a>3.3OC中配置MessageHandler</h3><p>MessageHandler的使用：<br>1.创建WKWebViewConfiguration对象，配置各个API对应的MessageHandler。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">WKWebViewConfiguration</span> *configuration = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</div><div class="line">    configuration.userContentController = [<span class="built_in">WKUserContentController</span> new];</div><div class="line"></div><div class="line">    [configuration.userContentController addScriptMessageHandler:<span class="keyword">self</span> name:<span class="string">@"ScanAction"</span>];</div><div class="line">    [configuration.userContentController addScriptMessageHandler:<span class="keyword">self</span> name:<span class="string">@"Location"</span>];</div><div class="line">    [configuration.userContentController addScriptMessageHandler:<span class="keyword">self</span> name:<span class="string">@"Share"</span>];</div><div class="line"></div><div class="line">    <span class="built_in">WKPreferences</span> *preferences = [<span class="built_in">WKPreferences</span> new];</div><div class="line">    preferences.javaScriptCanOpenWindowsAutomatically = <span class="literal">YES</span>;</div><div class="line">    preferences.minimumFontSize = <span class="number">40.0</span>;</div><div class="line">    configuration.preferences = preferences;</div></pre></td></tr></table></figure>
<p>2.创建WKWebView。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.frame configuration:configuration];</div><div class="line"></div><div class="line">    <span class="built_in">NSString</span> *urlStr = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"index.html"</span> ofType:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">NSURL</span> *fileURL = [<span class="built_in">NSURL</span> fileURLWithPath:urlStr];</div><div class="line">    [<span class="keyword">self</span>.webView loadFileURL:fileURL allowingReadAccessToURL:fileURL];</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.webView.navigationDelegate = <span class="keyword">self</span>;</div><div class="line">    <span class="keyword">self</span>.webView.UIDelegate = <span class="keyword">self</span>;</div><div class="line">    [<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.webView];</div></pre></td></tr></table></figure>
<p>3.实现协议方法。<br>这里实现了两个协议&lt; WKUIDelegate,WKScriptMessageHandler &gt;，WKUIDelegate是因为需要在JS中弹出alert。WKScriptMessageHandler是用来处理JS调用OC方法的请求。</p>
<p>先看实现协议方法的示例代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - WKScriptMessageHandler</span></div><div class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message</div><div class="line">&#123;</div><div class="line"><span class="comment">//    message.body  --  Allowed types are NSNumber, NSString, NSDate, NSArray,NSDictionary, and NSNull.</span></div><div class="line">    <span class="keyword">if</span> ([message.name isEqualToString:<span class="string">@"ScanAction"</span>]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"扫一扫"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([message.name isEqualToString:<span class="string">@"Location"</span>]) &#123;</div><div class="line">        [<span class="keyword">self</span> getLocation];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([message.name isEqualToString:<span class="string">@"Share"</span>]) &#123;</div><div class="line">        [<span class="keyword">self</span> shareWithParams:message.body];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>WKScriptMessage有两个关键属性name和body。</p>
<p>因为已经给每一个OC方法取了一个name，那么就可以根据name来区分执行不同的方法。body中存着JS要给OC传的参数。关于参数body的解析，举一个body中放字典的例子，解析JS调用OC实现分享的参数：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)shareWithParams:(<span class="built_in">NSDictionary</span> *)tempDic</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (![tempDic isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 分解参数</span></div><div class="line">    <span class="built_in">NSString</span> *title = [tempDic objectForKey:<span class="string">@"title"</span>];</div><div class="line">    <span class="built_in">NSString</span> *content = [tempDic objectForKey:<span class="string">@"content"</span>];</div><div class="line">    <span class="built_in">NSString</span> *url = [tempDic objectForKey:<span class="string">@"url"</span>];</div><div class="line">    <span class="comment">// 在这里执行分享的操作</span></div><div class="line">    <span class="comment">// ......</span></div><div class="line">    <span class="comment">// 将分享结果返回给js</span></div><div class="line">    <span class="built_in">NSString</span> *jsStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"shareResult('%@','%@','%@')"</span>,title,content,url];</div><div class="line">    [<span class="keyword">self</span>.webView evaluateJavaScript:jsStr completionHandler:^(<span class="keyword">id</span> _Nullable result, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@----%@"</span>,result, error);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-4JS中的使用"><a href="#3-4JS中的使用" class="headerlink" title="3.4JS中的使用"></a>3.4JS中的使用</h3><p>处理HTML中JS调用，JS部分代码进行改动：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 传null</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">scanClick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">window</span>.webkit.messageHandlers.ScanAction.postMessage(<span class="literal">null</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 传字典              </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shareClick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">window</span>.webkit.messageHandlers.Share.postMessage(&#123;<span class="attr">title</span>:<span class="string">'测试分享的标题'</span>,<span class="attr">content</span>:<span class="string">'测试分享的内容'</span>,<span class="attr">url</span>:<span class="string">'http://www.baidu.com'</span>&#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 传字符串</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">playSound</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="built_in">window</span>.webkit.messageHandlers.PlaySound.postMessage(<span class="string">'shake_sound_male.wav'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 传数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">colorClick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">window</span>.webkit.messageHandlers.Color.postMessage([<span class="number">67</span>,<span class="number">205</span>,<span class="number">128</span>,<span class="number">0.5</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-5OC调用JS"><a href="#3-5OC调用JS" class="headerlink" title="3.5OC调用JS"></a>3.5OC调用JS</h3><p>这里使用WKWebView实现OC调用JS方法跟WKWebView使用URL拦截是一样的，还是利用<br><code>- evaluateJavaScript:completionHandler:</code>方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将分享结果返回给js</span></div><div class="line">    <span class="built_in">NSString</span> *jsStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"shareResult('%@','%@','%@')"</span>,title,content,url];</div><div class="line">    [<span class="keyword">self</span>.webView evaluateJavaScript:jsStr completionHandler:^(<span class="keyword">id</span> _Nullable result, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@----%@"</span>,result, error);</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
<h2 id="4-JavaScriptCore"><a href="#4-JavaScriptCore" class="headerlink" title="4.JavaScriptCore"></a>4.JavaScriptCore</h2><p><img src="http://upload-images.jianshu.io/upload_images/336955-9a500c7f140ebd15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>JavaScriptCore自iOS7之后出现，用Objective-C把WebKit的JavaScript引擎封装了一下，提供了简单快捷的方式与JavaScript交互。</p>
<p>特点：</p>
<ul>
<li>JS中调用OC方法更简单，参数的传递也更加简单</li>
<li>支持iOS7以上</li>
</ul>
<h3 id="4-1JavaScriptCore说明"><a href="#4-1JavaScriptCore说明" class="headerlink" title="4.1JavaScriptCore说明"></a>4.1JavaScriptCore说明</h3><p>JavaScriptCore是一个iOS7新添加的框架，使用前需要先导入JavaScriptCore.framework。在JavaScriptCore.h中可以看到，该框架主要的类有五个：</p>
<ul>
<li><code>JSVirtualMachine</code>直译是JS虚拟机，也就是说JavaScript是在一个虚拟的环境中执行，而JSVirtualMachine为其执行提供底层资源。</li>
<li><code>JSContext</code>是为JavaScript的执行提供运行环境，所有的JavaScript的执行都必须在JSContext环境中。JSContext也管理JSVirtualMachine中对象的生命周期。每一个JSValue对象都要强引用关联一个JSContext。当与某JSContext对象关联的所有JSValue释放后，JSContext也会被释放。</li>
<li><code>JSValue</code>都是通过JSContext返回或者创建的，并没有构造方法。JSValue包含了每一个JavaScript类型的值，通过JSValue可以将Objective-C中的类型转换为JavaScript中的类型，也可以将JavaScript中的类型转换为Objective-C中的类型。</li>
<li><code>JSManagedValue</code>主要用途是解决JSValue对象在Objective-C堆上的安全引用问题。把JSValue保存进Objective-C堆对象中是不正确的，这很容易引发循环引用，而导致JSContext不能释放。但是不常用。</li>
<li><code>JSExport</code>是一个协议类，但是该协议并没有任何属性和方法。可以自定义一个协议类，继承自JSExport。无论在JSExport里声明的属性、实例方法还是类方法，继承的协议都会自动的提供给任何JavaScript代码。因此，只需要在自定义的协议类中，添加上属性和方法就可以了。</li>
</ul>
<h3 id="4-2实现步骤"><a href="#4-2实现步骤" class="headerlink" title="4.2实现步骤"></a>4.2实现步骤</h3><p>1.创建UIWebView，并加载本地HTML。（同上）<br>2.JS代码，JS的调用更简单</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shareClick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//直接通过share()调用原生OC方法</span></div><div class="line">    share(<span class="string">'测试分享的标题'</span>,<span class="string">'测试分享的内容'</span>,<span class="string">'url=http://www.baidu.com'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shareResult</span>(<span class="params">channel_id,share_channel,share_url</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> content = channel_id+<span class="string">","</span>+share_channel+<span class="string">","</span>+share_url;</div><div class="line">    asyncAlert(content);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"returnValue"</span>).value = content;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">locationClick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//直接通过getLocation()调用原生OC方法</span></div><div class="line">    getLocation();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setLocation</span>(<span class="params">location</span>) </span>&#123;</div><div class="line">    asyncAlert(location);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"returnValue"</span>).value = location;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.OC中添加JS将要调用的原生OC方法</p>
<p><strong>主要在JSContext中定义JS的方法。</strong></p>
<p>在HMTL加载成功的回调方法<code>- (void)webViewDidFinishLoad:(UIWebView *)webView</code>中添加要调用的原生OC方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - UIWebViewDelegate</span></div><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"webViewDidFinishLoad"</span>);</div><div class="line"></div><div class="line">    [<span class="keyword">self</span> addCustomActions];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此处，将所有要添加的功能方法，集中到addCustomActions方法中添加：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - private method</span></div><div class="line">- (<span class="keyword">void</span>)addCustomActions</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 创建JSContext</span></div><div class="line">    JSContext *context = [<span class="keyword">self</span>.webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line"></div><div class="line">    [<span class="keyword">self</span> addScanWithContext:context];</div><div class="line">    [<span class="keyword">self</span> addLocationWithContext:context];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再实现每一个小功能：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addShareWithContext:(JSContext *)context</div><div class="line">&#123;</div><div class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 创建函数</span></div><div class="line">    context[<span class="string">@"share"</span>] = ^() &#123;</div><div class="line">        <span class="built_in">NSArray</span> *args = [JSContext currentArguments];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (args.count &lt; <span class="number">3</span>) &#123;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">NSString</span> *title = [args[<span class="number">0</span>] toString];</div><div class="line">        <span class="built_in">NSString</span> *content = [args[<span class="number">1</span>] toString];</div><div class="line">        <span class="built_in">NSString</span> *url = [args[<span class="number">2</span>] toString];</div><div class="line">        <span class="comment">// 在这里执行分享的操作...</span></div><div class="line"></div><div class="line">        <span class="comment">// 将分享结果返回给js</span></div><div class="line">        <span class="built_in">NSString</span> *jsStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"shareResult('%@','%@','%@')"</span>,title,content,url];</div><div class="line">        [[JSContext currentContext] evaluateScript:jsStr];</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>JS要调用的原生OC方法，可以在viewDidLoad webView被创建后就添加好，但最好是在网址加载成功后再添加，以避免无法预料的乱入Bug。</li>
<li>block中的执行环境是在子线程中。奇怪的是竟然可以更新部分UI，例如给view设置背景色，调用webView执行js等，但是弹出原生alertView就会在控制台报子线程操作UI的错误信息。</li>
<li>避免循环引用，因为block会持有外部变量，而JSContext也会强引用它所有的变量，因此在block中调用self时，要用__weak转一下。而且在block内不要使用外部的context以及JSValue，都会导致循环引用。如果要使用context可以使用[JSContext currentContext]。当然我们可以将JSContext和JSValue当做block的参数传进去，这样就可以使用啦。</li>
</ol>
</blockquote>
<p>3.OC调用JS方法<br>OC调用JS方法有多种方式，首先介绍使用JavaScriptCore框架的方式。<br><strong>方式1</strong><br>使用JSContext的方法- evaluateScript，可以实现OC调用JS方法。<br>下面是一个调用JS中payResult方法的示例代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *jsStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"payResult('%@')"</span>,<span class="string">@"支付成功"</span>];</div><div class="line">[[JSContext currentContext] evaluateScript:jsStr];</div></pre></td></tr></table></figure>
<p><strong>方式2</strong><br>使用JSValue的方法- callWithArguments，也可以实现OC调用JS方法。<br>下面这个示例代码依然是调用JS中的payResult:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JSContext *context = [<span class="keyword">self</span>.webView valueForKeyPath:<span class="string">@"documentView.webView.mainFrame.javaScriptContext"</span>];</div><div class="line"></div><div class="line">[context[<span class="string">@"payResult"</span>] callWithArguments:@[<span class="string">@"支付弹窗"</span>]];</div></pre></td></tr></table></figure>
<p>当然，如果是在执行原生OC方法之后，想要在OC执行完操作后，将结果回调给JS时，可以这样写：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)addPayActionWithContext:(JSContext *)context</div><div class="line">&#123;</div><div class="line">    context[<span class="string">@"payAction"</span>] = ^() &#123;</div><div class="line">        <span class="built_in">NSArray</span> *args = [JSContext currentArguments];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (args.count &lt; <span class="number">4</span>) &#123;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">NSString</span> *orderNo = [args[<span class="number">0</span>] toString];</div><div class="line">        <span class="built_in">NSString</span> *channel = [args[<span class="number">1</span>] toString];</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> amount = [[args[<span class="number">2</span>] toNumber] longLongValue];</div><div class="line">        <span class="built_in">NSString</span> *subject = [args[<span class="number">3</span>] toString];</div><div class="line"></div><div class="line">        <span class="comment">// 支付操作</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"orderNo:%@---channel:%@---amount:%lld---subject:%@"</span>,orderNo,channel,amount,subject);</div><div class="line">        <span class="comment">// 将支付结果返回给js</span></div><div class="line">        [[JSContext currentContext][<span class="string">@"payResult"</span>] callWithArguments:@[<span class="string">@"支付成功"</span>]];</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>方式3</strong><br>同上，利用UIWebView的API：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *jsStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"payResult('%@')"</span>,<span class="string">@"支付成功"</span>];</div><div class="line">[weakSelf.webView stringByEvaluatingJavaScriptFromString:jsStr];</div></pre></td></tr></table></figure>
<h2 id="5-WebViewJavascriptBridge"><a href="#5-WebViewJavascriptBridge" class="headerlink" title="5.WebViewJavascriptBridge"></a>5.WebViewJavascriptBridge</h2><p><img src="http://upload-images.jianshu.io/upload_images/336955-ecfdd601fa753bb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>WebViewJavascriptBridge是一个第三方的JS与OC交互的库，在UIWebView和WKWebView下都可以使用，但是使用方法略有不同。UIWebView中使用WebViewJavascriptBridge来达到JS与OC互相调用的目的，WKWebView使用的是WKWebViewJavascriptBridge。下面以UIWebVIew为例。</p>
<p>利用WebViewJavascriptBridge来实现JS与OC的交互的优点：</p>
<ul>
<li>获取参数时，更方便一些，如果参数中有一些特殊符号或者url带参数，能够很好的解析。</li>
</ul>
<p>也有一些缺点：</p>
<ul>
<li>做一次交互，需要执行的js 与原生的交互步骤较多，至少有两次。</li>
<li>需要花较多的时间，理解WebViewJavascriptBridge的原理和使用步骤。</li>
</ul>
<h3 id="5-1UIWebView中的实现"><a href="#5-1UIWebView中的实现" class="headerlink" title="5.1UIWebView中的实现"></a>5.1UIWebView中的实现</h3><p>1.添加第三方库<br>2.创建UIWebView<br>在viewDidLoad中创建：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.webView = [[<span class="built_in">UIWebView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.frame];</div><div class="line">[<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.webView];</div><div class="line"></div><div class="line"><span class="built_in">NSURL</span> *htmlURL = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:<span class="string">@"index.html"</span> withExtension:<span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:htmlURL];</div><div class="line"></div><div class="line"><span class="comment">// UIWebView 滚动的比较慢，这里设置为正常速度</span></div><div class="line"><span class="keyword">self</span>.webView.scrollView.decelerationRate = <span class="built_in">UIScrollViewDecelerationRateNormal</span>;</div><div class="line">[<span class="keyword">self</span>.webView loadRequest:request];</div></pre></td></tr></table></figure>
<blockquote>
<p>这里不需要为UIWebView设置代理，因为在创建WebViewJavascriptBridge的时候，UIWebView的代理已经被赋值给了WebViewJavascriptBridge。</p>
</blockquote>
<p>3.创建WebViewJavascriptBridge<br>因为WebViewJavascriptBridge实例，在控制中多个地方用到，因此最好定义一个property或者实例变量存起来。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">_webViewBridge = [WebViewJavascriptBridge bridgeForWebView:<span class="keyword">self</span>.webView];</div><div class="line"><span class="comment">// &#123;setWebViewDelegate&#125;这个方法，可以将UIWebView的代理，从_webViewBridge中再传递出来。</span></div><div class="line"><span class="comment">// 所以如果你要在控制器中实现UIWebView的代理方法时，添加下面这样代码，否则可以不写。</span></div><div class="line">[_webViewBridge setWebViewDelegate:<span class="keyword">self</span>];</div></pre></td></tr></table></figure>
<p>在bridgeForWebView:中可以看到UIWebView的代理设置</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">instancetype</span>)bridgeForWebView:(WVJB_WEBVIEW_TYPE*)webView &#123;</div><div class="line">    WebViewJavascriptBridge* bridge = [[<span class="keyword">self</span> alloc] init];</div><div class="line">    [bridge _platformSpecificSetup:webView];</div><div class="line">    <span class="keyword">return</span> bridge;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 上面方法调用了这个方法</span></div><div class="line">- (<span class="keyword">void</span>) _platformSpecificSetup:(WVJB_WEBVIEW_TYPE*)webView &#123;</div><div class="line">    _webView = webView;</div><div class="line">    _webView.delegate = <span class="keyword">self</span>;</div><div class="line">    _base = [[WebViewJavascriptBridgeBase alloc] init];</div><div class="line">    _base.delegate = <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4.注册JS要调用的OC函数</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - private method</span></div><div class="line">- (<span class="keyword">void</span>)registerNativeFunctions</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> registShareFunction];</div><div class="line">    [<span class="keyword">self</span> registLocationFunction];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)registShareFunction</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 所有JS需要调用的原生功能都要先用registerHandler注册一下</span></div><div class="line">    [_webViewBridge registerHandler:<span class="string">@"shareClick"</span> handler:^(<span class="keyword">id</span> data, WVJBResponseCallback responseCallback) &#123;</div><div class="line">        <span class="comment">// data的类型与JS中传的参数有关</span></div><div class="line">        <span class="built_in">NSDictionary</span> *tempDic = data;</div><div class="line">        <span class="comment">// 在这里执行分享的操作</span></div><div class="line">        <span class="built_in">NSString</span> *title = [tempDic objectForKey:<span class="string">@"title"</span>];</div><div class="line">        <span class="built_in">NSString</span> *content = [tempDic objectForKey:<span class="string">@"content"</span>];</div><div class="line">        <span class="built_in">NSString</span> *url = [tempDic objectForKey:<span class="string">@"url"</span>];</div><div class="line"></div><div class="line">        <span class="comment">// 将分享的结果返回到JS中</span></div><div class="line">        <span class="built_in">NSString</span> *result = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"分享成功:%@,%@,%@"</span>,title,content,url];</div><div class="line">        responseCallback(result);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>- (void)registerHandler:(NSString *)handlerName handler:(WVJBHandler)handler</code>该方法有两个参数：第一个参数handlerName，是对这个功能起的一个别名；第二个参数handler，是个block，也就是Native实现的功能。JS要调用的Native实现其实就是block的{}内的代码功能。</p>
<p>5.HTML中JS代码的书写（JS调用OC）<br>由于WebViewJavascriptBridge也是拦截URL来实现的调用原生功能，所以实现方式和拦截URL的方式差不多。</p>
<p>HTML中有一个必须要添加的JS方法，然后需要自动调用一次该方法。该方法是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function setupWebViewJavascriptBridge(callback) &#123;</div><div class="line">    if (window.WebViewJavascriptBridge) &#123; return callback(WebViewJavascriptBridge); &#125;</div><div class="line">    if (window.WVJBCallbacks) &#123; return window.WVJBCallbacks.push(callback); &#125;</div><div class="line">    window.WVJBCallbacks = [callback];</div><div class="line">    var WVJBIframe = document.createElement('iframe');</div><div class="line">    WVJBIframe.style.display = 'none';</div><div class="line">    WVJBIframe.src = 'wvjbscheme://__BRIDGE_LOADED__';</div><div class="line">    document.documentElement.appendChild(WVJBIframe);</div><div class="line">    setTimeout(function() &#123; document.documentElement.removeChild(WVJBIframe) &#125;, 0)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这个方法的参数是一个function，这个方法的作用主要是在第一次加载HTML的时候起作用，目的是加载一次<code>wvjbscheme://__BRIDGE_LOADED__</code>，来触发往HTML中注册一些已经写好的JS方法。</p>
<p>添加完setupWebViewJavascriptBridge方法，需要在JS中主动调用一次该方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">setupWebViewJavascriptBridge(<span class="function"><span class="keyword">function</span>(<span class="params">bridge</span>) </span>&#123;</div><div class="line">     bridge.registerHandler(<span class="string">'testJavascriptHandler'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</div><div class="line">        alert(<span class="string">'JS方法被调用:'</span>+data);</div><div class="line">        responseCallback(<span class="string">'js执行过了'</span>);</div><div class="line">     &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>Native需要调用的JS功能，也是需要先注册，然后再执行。如果Native需要调用的JS功能有多个，那么这些功能都要在这里先注册，注册之后才能够被Native调用。</p>
<p>JS中这个方法的作用:</p>
<blockquote>
<ol>
<li>首先调用setupWebViewJavascriptBridge，第一次执行的时候，由于window.WebViewJavascriptBridge和window.WVJBCallbacks都不存在，所以会继续往下执行，将参数callback（它是一个function）装进数组赋值给window.WVJBCallbacks。<br>js 支持动态添加属性并赋值，这里window.WVJBCallbacks = [callback];就是动态添加属性，并赋值。另外js中的全局变量都可以使用window.xxxx来调用；动态添加的属性也可以不加window.，直接使用。</li>
<li>WebViewJavascriptBridge 帮助JS调用Native的URL有两种，一种是<code>wvjbscheme://__BRIDGE_LOADED__</code>；而另一种是<code>wvjbscheme://__WVJB_QUEUE_MESSAGE__</code>。前者只有在调用setupWebViewJavascriptBridge的时候执行一次，一般来说这个URL如果没有页面应该只会执行一次。第二种URL所有js调用Native功能时，都会使用到。</li>
<li>在拦截到自定义的URL时，WebViewJavascriptBridge分了三种情况，如果是<code>wvjbscheme://__BRIDGE_LOADED__</code>，就往HMTL中注入已经写好的js，这个js在WebViewJavascriptBridge_JS中；如果是<code>wvjbscheme://__WVJB_QUEUE_MESSAGE__</code>,那就利用stringByEvaluatingJavaScriptFromString，取回调用js中callHandler传进去的参数。然后再从WebViewJavascriptBridge之前保存的Native方法对应的block，调用对应的block。</li>
</ol>
</blockquote>
<p>6.JS调用Native<br>利用之前注入的JS方法callHandler就可以调用Native功能：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shareClick</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> params = &#123;<span class="string">'title'</span>:<span class="string">'测试分享的标题'</span>,<span class="string">'content'</span>:<span class="string">'测试分享的内容'</span>,<span class="string">'url'</span>:<span class="string">'http://www.baidu.com'</span>&#125;;</div><div class="line">    WebViewJavascriptBridge.callHandler(<span class="string">'shareClick'</span>,params,<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">         alert(response);</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"returnValue"</span>).value = response;</div><div class="line">     &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里callHandler前的WebViewJavascriptBridge，其实就是上一步注入到JS中的代码中，动态创建属性，动态赋值的属性。如下代码片段可以在WebViewJavascriptBridge_JS中找到。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.WebViewJavascriptBridge = &#123;</div><div class="line">  <span class="attr">registerHandler</span>: registerHandler,</div><div class="line">  <span class="attr">callHandler</span>: callHandler,</div><div class="line">  <span class="attr">disableJavscriptAlertBoxSafetyTimeout</span>: disableJavscriptAlertBoxSafetyTimeout,</div><div class="line">  <span class="attr">_fetchQueue</span>: _fetchQueue,</div><div class="line">  <span class="attr">_handleMessageFromObjC</span>: _handleMessageFromObjC</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<p>而callHandler 内部调用了另一个JS function _doSend，而_doSend内部其实，就是把handlerName和参数data，再加上callbackId装成键值对，然后保存到数组sendMessageQueue，同时加载一次<code>wvjbscheme://__WVJB_QUEUE_MESSAGE__</code>。<br>到此，利用WebViewJavascriptBridge实现JS调用iOS Native就完成了。</p>
<p>7.Native主动调用js功能<br>Native主动调用js的功能时，需要先在js中为要调用的功能注册一个别名。</p>
<ul>
<li>js注册Native要调用的功能</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">setupWebViewJavascriptBridge(<span class="function"><span class="keyword">function</span>(<span class="params">bridge</span>) </span>&#123;</div><div class="line">     bridge.registerHandler(<span class="string">'testJSFunction'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, responseCallback</span>) </span>&#123;</div><div class="line">        alert(<span class="string">'JS方法被调用:'</span>+data);</div><div class="line">        responseCallback(<span class="string">'js执行过了'</span>);</div><div class="line">     &#125;)</div><div class="line">    <span class="comment">// 注册其他的功能</span></div><div class="line">    <span class="comment">//bridge.regsiterHandler.....</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>Native调用功能的别名handlerName</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//    // 如果不需要参数，不需要回调，使用这个</span></div><div class="line"><span class="comment">//    [_webViewBridge callHandler:@"testJSFunction"];</span></div><div class="line"><span class="comment">//    // 如果需要参数，不需要回调，使用这个</span></div><div class="line"><span class="comment">//    [_webViewBridge callHandler:@"testJSFunction" data:@"一个字符串"];</span></div><div class="line">    <span class="comment">// 如果既需要参数，又需要回调，使用这个</span></div><div class="line">    [_webViewBridge callHandler:<span class="string">@"testJSFunction"</span> data:<span class="string">@"一个字符串"</span> responseCallback:^(<span class="keyword">id</span> responseData) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"调用完JS后的回调：%@"</span>,responseData);</div><div class="line">    &#125;];</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Hybrid </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> JS </tag>
            
            <tag> Hybrid </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[免费个人blog快速搭建(Hexo+GitHub)]]></title>
      <url>/2016/08/19/20160819-blog/</url>
      <content type="html"><![CDATA[<p>个人博客的搭建方法有很多种，有动态的也有静态的，感兴趣的话可以看看知乎上这个问答<a href="https://www.zhihu.com/question/20463581" target="_blank" rel="external">如何搭建个人独立博客？</a>，本文主要介绍自己使用hexo和github搭建博客的方法。</p>
<a id="more"></a>
<p>PS：因为演示中主要使用windows电脑，所以只介绍windows的演示，其他系统的主要区别主要在node.js和git的软件安装上，请自行Google。</p>
<p>只能说这种写博客的方法很程序猿-.-</p>
<h2 id="一、部署准备"><a href="#一、部署准备" class="headerlink" title="一、部署准备"></a>一、部署准备</h2><ul>
<li>node.js安装</li>
<li>hexo安装(依赖node.js)</li>
<li>git安装</li>
<li>github仓库的创建</li>
<li>hexo网页部署</li>
</ul>
<h2 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h2><h3 id="1-node-js安装"><a href="#1-node-js安装" class="headerlink" title="1.node.js安装"></a>1.node.js安装</h3><ul>
<li>下载链接: <a href="https://nodejs.org/en/download/" target="_blank" rel="external">node.js下载</a></li>
<li>windows版直接安装</li>
<li>验证安装：打开cmd，输入<code>npm</code>，有命令提示即成功<br><img src="http://i.imgur.com/YXfRdmy.png" alt=""></li>
</ul>
<h3 id="2-hexo安装"><a href="#2-hexo安装" class="headerlink" title="2.hexo安装"></a>2.hexo安装</h3><ul>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo官网</a></li>
<li><p>安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
</li>
<li><p>验证安装：在cmd中输入<code>hexo</code>，有命令提示即成功<br><img src="http://i.imgur.com/jcL7AdJ.png" alt=""></p>
</li>
</ul>
<p><strong>详细的建站步骤见<a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="external">官网</a></strong>。</p>
<h3 id="3-windows下git的安装"><a href="#3-windows下git的安装" class="headerlink" title="3.windows下git的安装"></a>3.windows下git的安装</h3><ul>
<li>windows下安装git<a href="https://git-scm.com/downloads" target="_blank" rel="external">下载链接</a></li>
<li>安装下载的git安装包即可</li>
<li>git的常用命令学习<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">常用 Git 命令清单</a></li>
<li>安利: <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰git教程</a></li>
</ul>
<h2 id="三、本地git和github的配置"><a href="#三、本地git和github的配置" class="headerlink" title="三、本地git和github的配置"></a>三、本地git和github的配置</h2><h3 id="1-GitHub的仓库创建"><a href="#1-GitHub的仓库创建" class="headerlink" title="1.GitHub的仓库创建"></a>1.GitHub的仓库创建</h3><h4 id="注册Github"><a href="#注册Github" class="headerlink" title="注册Github"></a><strong>注册Github</strong></h4><p>网站:<a href="https://github.com" target="_blank" rel="external">https://github.com</a></p>
<h4 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a><strong>新建仓库</strong></h4><ul>
<li>在顶部状态栏右边点击”+”号创建Repo</li>
</ul>
<p><img src="http://i.imgur.com/amjEpjW.png" alt=""></p>
<blockquote>
<p>repository代表“项目/仓库”，用来保存自己的项目代码，做个人网站的话主要用来保存自己网站的网页文件。</p>
</blockquote>
<ul>
<li>填写repo的名字，命名方式<code>[自己的用户名.github.io]</code>，见图步骤1，点击“Create repository”按钮创建完成。<br><img src="http://i.imgur.com/3fs9tPb.png" alt=""></li>
</ul>
<blockquote>
<ul>
<li><p>repo的命名方式也可随便命名，使用<code>[自己的用户名.github.io]</code>命名方式，最后就直接可以通过<code>http://自己的用户名.github.io</code>来访问自己的blog，如果使用其他的仓库，比如”pageTest”，那么个人blog的访问链接为<code>http://自己的用户名.github.io/pageTest</code>，以此类推不同仓库名的访问链接。</p>
</li>
<li><p>其实这就意味着每个仓库都可以被当作一个网站使用。</p>
</li>
<li><p>此外你还可以将每个仓库绑定到自己拥有的域名上去，详见该链接<a href="http://www.pchou.info/ssgithubPage/2013-01-05-build-github-blog-page-03.html" target="_blank" rel="external">github仓库绑定域名</a>。</p>
</li>
</ul>
</blockquote>
<ul>
<li>复制创建好的repo的名字<br>点击SSH，再点击右边的复制按钮即可复制repo的链接，<strong>此链接将在后面使用</strong>。<br><img src="http://i.imgur.com/IJOC00R.png" alt=""></li>
</ul>
<h3 id="2-本地git的使用"><a href="#2-本地git的使用" class="headerlink" title="2. 本地git的使用"></a>2. 本地git的使用</h3><ul>
<li>打开git bash(桌面打开，或者在右键菜单中打开)，生成用于SSH访问的密钥，输入以下命令，出现提示时按回车即可，直接执行结束。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"XXX@email.com"</span></div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/FR4NabA.png" alt=""></p>
<ul>
<li>打开<code>~/.ssh</code>会有两个密钥文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/.ssh</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://i.imgur.com/fn1wKQp.png" alt=""></p>
<ul>
<li>显示公钥<code>id_rsa.pub</code>，选中-复制<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat id_rsa.pub</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://i.imgur.com/xUuB01X.png" alt=""></p>
<ul>
<li>打开github，登录，在顶部状态栏右边，点击自己的头像，选择<code>Settings</code><br><img src="http://i.imgur.com/mOUBMJ6.png" alt=""></li>
</ul>
<p><br></p>
<ul>
<li>左边点击<code>SSH and GPG keys</code>，再点击<code>New SSH key</code>添加刚刚复制的公钥<br><img src="http://i.imgur.com/xDxkcoU.png" alt=""><br><br></li>
<li>给该公钥添加一个名字(当有多个终端时便于区分)<br><img src="http://i.imgur.com/YCzhk6Y.png" alt=""><br><br></li>
<li>验证添加是否成功<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://i.imgur.com/0nDiBc7.png" alt=""></p>
<p><br></p>
<ul>
<li>本地配置git<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"自己的用户名"</span></div><div class="line">$ git config --global user.email  <span class="string">"自己的邮箱"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://i.imgur.com/WPsdE22.png" alt=""></p>
<h2 id="四、在本地文件夹部署hexo"><a href="#四、在本地文件夹部署hexo" class="headerlink" title="四、在本地文件夹部署hexo"></a>四、在本地文件夹部署hexo</h2><ul>
<li>选择个人blog存放的文件夹位置(我们暂把它称为<code>网站部署文件夹</code>)，进行初始化和插件安装，安装步骤：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>&lt;folder&gt;即为<code>网站部署文件夹</code>位置，也可以不添加folder，即直接在命令行所在的当前文件夹下创建（即命令行所在的当前文件夹为<code>网站部署文件夹</code>）。<br><br><br>具体步骤：</p>
<ul>
<li>打开git bash(桌面打开，或者在右键菜单中打开)<br><img src="http://i.imgur.com/q8XnJcw.png" alt=""></li>
<li>进入到部署目录<br><img src="http://i.imgur.com/nqGh8dc.png" alt=""></li>
<li>初始化<br><img src="http://i.imgur.com/H4vKm4r.png" alt=""></li>
<li>插件安装<br><img src="http://i.imgur.com/fkXpjzO.png" alt=""></li>
<li>这样在我的<code>hexo_if</code>这个<code>网站部署文件夹</code>中就创建好了一套部署网站的hexo文件</li>
</ul>
<h2 id="五、Hexo创建文章"><a href="#五、Hexo创建文章" class="headerlink" title="五、Hexo创建文章"></a>五、Hexo创建文章</h2><p>hexo的文章生成主要思路是：</p>
<ul>
<li>创建一个Markdown文件</li>
<li>使用markdown语法写好一篇文章</li>
<li>再交由Hexo编译成一个html页面。</li>
</ul>
<h3 id="1-新建文章"><a href="#1-新建文章" class="headerlink" title="1.新建文章"></a>1.新建文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new [layout] &lt;title&gt;</div></pre></td></tr></table></figure>
<ul>
<li>只使用<code>hexo new</code>命令，默认会创建一个<code>my new post.md</code>的文件</li>
<li>可选：可以在命令中指定文章的布局（layout），默认为post，可以通过修改_config.yml中的default_layout参数来指定默认布局。</li>
<li>可选：可以直接给新建的文件命名&lt;title&gt;</li>
</ul>
<p><br><br><strong>新建文章举例：</strong><br><img src="http://i.imgur.com/W6vwOzO.png" alt=""></p>
<ul>
<li>如上，创建一个<code>firstpage</code>的Markdown文件，在当前<code>网站部署文件夹</code>下的<code>source/_posts/</code>文件夹中可以看到<code>firstPage.md</code>文件。</li>
<li>使用markdown编辑器打开<code>firstPage.md</code>文件。<blockquote>
<p>windows下推荐MarkdownPad编辑器。<br>也可以在网页版的编辑器中写完后复制到<code>firstPage.md</code>文件中。</p>
</blockquote>
</li>
</ul>
<p><br></p>
<ul>
<li><code>firstPage.md</code>文件的格式</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">firstPage</span> <span class="comment">#文章名称，会显示在页面标签页上(与firstPage文件名无关，自行修改)</span></div><div class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-08</span><span class="bullet">-18</span> <span class="number">22</span><span class="string">:35:45</span> <span class="comment">#文章的生成时间</span></div><div class="line"><span class="attr">categories:</span> <span class="string">test</span>  <span class="comment">#文章的分类（自带模板没有，可手动添加）</span></div><div class="line"><span class="attr">tags:</span> <span class="string">[tag1,tag2,tag3]</span> <span class="comment">#文章的标签，多个标签的格式</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="comment">#正文</span></div><div class="line"><span class="comment">#正文</span></div><div class="line"><span class="comment">#正文</span></div></pre></td></tr></table></figure>
<p><br></p>
<ul>
<li>以下是我写好的一个md文件</li>
</ul>
<p><img src="http://i.imgur.com/PDNTarg.png" alt=""></p>
<blockquote>
<p>&lt;!–more–&gt;之前的正文内容会被作为文章的简介，在blog的首页显示出来</p>
</blockquote>
<p><br></p>
<h3 id="2-生成网页文件"><a href="#2-生成网页文件" class="headerlink" title="2.生成网页文件"></a>2.生成网页文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g <span class="comment">#生成</span></div><div class="line">$ hexo s <span class="comment">#在本地建立服务器预览网站</span></div></pre></td></tr></table></figure>
<ul>
<li><p>生成<br><img src="http://i.imgur.com/jHRWArp.png" alt=""></p>
</li>
<li><p>预览<br><img src="http://i.imgur.com/0LeS8dw.png" alt=""></p>
</li>
<li><p>在浏览器打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>，即可预览blog。<br><img src="http://i.imgur.com/xwNghr4.png" alt=""></p>
</li>
</ul>
<p><br></p>
<ul>
<li><p>在首页中，文章的显示信息<br><img src="http://i.imgur.com/FV6D8E3.png" alt=""></p>
</li>
<li><p>全部无误后，部署到github</p>
</li>
</ul>
<p><br></p>
<h3 id="3-网站部署"><a href="#3-网站部署" class="headerlink" title="3.网站部署"></a>3.网站部署</h3><p><strong>接下来就可以将这套网页文件部署到github远程仓库中了。</strong></p>
<p>首先，打开hexo<code>网站部署文件夹</code>下的<code>_config.yml</code>文件(_config.yml的具体配置见<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">_config.yml配置</a>)，在文件最后配置github仓库信息。</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">deploy:</span></div><div class="line"><span class="symbol">  type:</span> <span class="comment">//配置仓库类型</span></div><div class="line"><span class="symbol">  repository:</span> <span class="comment">//配置仓库链接</span></div><div class="line"><span class="symbol">  branch:</span> <span class="comment">//配置推送到仓库的链接</span></div></pre></td></tr></table></figure>
<p><strong>特别注意：</strong> <code>冒号&#39;:&#39;后面要有一个空格</code><br><img src="http://i.imgur.com/4t42KdC.png" alt=""></p>
<ul>
<li>在type填写<code>git</code></li>
<li>在repository填写<code>前面复制的github仓库链接</code></li>
<li>在branch填写<code>master</code>分支<blockquote>
<p>其他命名方式的仓库，可能需要先填为<code>master</code>分支部署一次，然后再把branch填写为<code>gh-pages</code>分支再推送一次</p>
</blockquote>
</li>
</ul>
<p><br><br>然后使用hexo部署命令部署到github仓库：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo d</div></pre></td></tr></table></figure></p>
<p>在github仓库中检查文件是否上传，然后通过<strong><code>sweetfish.github.io</code></strong>(<code>sweetfish</code>替换为自己的用户名)访问自己的网站。</p>
<p><strong>PS:</strong> 可能会出现无法部署到github的情况，根据官方Issues（<a href="https://github.com/hexojs/hexo/issues/1154" target="_blank" rel="external">https://github.com/hexojs/hexo/issues/1154</a>），需要安装hexo-deployer-git，命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<h2 id="六、Hexo文件系统分析"><a href="#六、Hexo文件系统分析" class="headerlink" title="六、Hexo文件系统分析"></a>六、Hexo文件系统分析</h2><p><img src="http://i.imgur.com/Crq8UrN.png" alt=""></p>
<ul>
<li>_config.yml：是网站的配置文件，可以配置网站大部分的参数。（配置方法见<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">_config.yml配置</a>）</li>
<li>package.json：是应用程序的信息（安装的插件版本）。</li>
<li>scaffolds：是模板件夹，当新建一个文章时，Hexo会根据这里的模板来建立一个文章的MD编辑文件。</li>
<li>source：是资源文件夹，存放用户的资源。除<em>posts文件夹之外，开头命名为</em>(下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</li>
<li>themes：是主题文件夹，Hexo会根据这个主题来生成对应的静态页面。<blockquote>
<p>主题即为一个网站的“长相”，包括各个页面的布局、样式、动画(css、js)等。</p>
</blockquote>
</li>
</ul>
<hr>
<div align="center">—持续添加—</div>

<hr>
<p><br><br>其他参考：<br>[1] <a href="http://beiyuu.com/github-pages" target="_blank" rel="external">使用Github Pages建独立博客</a><br>[2] <a href="http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html" target="_blank" rel="external">一步步在GitHub上创建博客主页</a><br>[3] <a href="http://isnowfy.github.io/about-simple-cn.html" target="_blank" rel="external">用静态页面生成静态博客</a><br>[4] <a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a><br>[5] <a href="http://www.jianshu.com/p/f4dce0e76886#" target="_blank" rel="external">使用Hexo搭建个人博客</a><br>[6] <a href="http://www.jianshu.com/p/465830080ea9" target="_blank" rel="external">HEXO+Github,搭建属于自己的博客</a><br>[7] <a href="http://www.5941740.cn/2016/02/19/gulp-minify-blog/" target="_blank" rel="external">使用gulp精简hexo博客代码</a></p>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016重新开始]]></title>
      <url>/2016/08/18/20160818change/</url>
      <content type="html"><![CDATA[<p>　　曾经以为的漫长学习生涯终于在2016年6月20日戛然而止，那一天我离开了与我有七年之痒的第二故乡——成都。</p>
<a id="more"></a>
<p>　　因为刚从一场漫长的旅游中恢复过来，所以回到家就懒了好多天，真是太累了(明明就是懒)，在家待了一段时间就入职了。</p>
<p>　　真的从学校开始步入了职场，又迈入了一个新阶段，重新开始。</p>
<p>　　感兴趣的工作，适应的很好~</p>
<p>　　努力做一个经常输出的汉纸。</p>
<p>　　能经常更博…</p>
<p>　　能吃好吃的…</p>
<hr>
<p>blog也重新开始了，以前的乱七八糟就堆到另一个仓库…<a href="http://old.sweetfish.cn/" target="_blank" rel="external">http://old.sweetfish.cn/</a></p>
<hr>
<p>　　加油吧~</p>
]]></content>
      
        <categories>
            
            <category> 工作 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[图片批量动态添加水印-Python实现]]></title>
      <url>/2015/05/05/20150505%E5%9B%BE%E7%89%87%E6%89%B9%E9%87%8F%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/</url>
      <content type="html"><![CDATA[<p>使用Python压缩原始照片，再在照片上粘贴水印。</p>
<a id="more"></a>
<h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h2><p>　　最近在做一个照片墙，就是一个类似瀑布流的设计，预览时显示一个小图，点击小图时再显示清晰大图。而且，数码照片经过后期处理之后一般都在<code>20M</code>左右，不适合直接做为网络图片显示。所以针对原片，需要压缩出一个<code>500KB</code>左右的预览小图和一个<code>2MB</code>左右清晰大图。但是每张照片都要用PS进行压缩，又太花费时间，所以从一个工科男的角度，我需要一个批处理程序。</p>
<p>　　处理图片，这自然而然就要想到Python<del>大法好</del>。</p>
<h2 id="二-准备工作"><a href="#二-准备工作" class="headerlink" title="二. 准备工作"></a>二. 准备工作</h2><ul>
<li>首先熟悉Python的图形库</li>
<li>设计图片大小和水印添加方式</li>
<li>梳理整体流程</li>
</ul>
<p>那么，开始一段<del>伪</del>设计之路吧。</p>
<h2 id="三-Python图形库PIL"><a href="#三-Python图形库PIL" class="headerlink" title="三. Python图形库PIL"></a>三. Python图形库PIL</h2><p>　　百度一下就知道Python的最常用的图形库就是PIL，快刀斩乱麻，打开命令行马上安装：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install PIL</div></pre></td></tr></table></figure></p>
<p>　　Duang一下,一行红字：<br><img src="http://i.imgur.com/9kNvb6A.jpg" alt=""><br>　　好的，加参数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install PIL --allow-external PIL</div></pre></td></tr></table></figure></p>
<p>　　Duang一下,又一行红字：<br><img src="http://i.imgur.com/7XFaWKC.jpg" alt=""><br>　　好的，再加参数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install PIL --allow-external PIL --allow-unverified PIL</div></pre></td></tr></table></figure></p>
<p>　　欧凯，一切都平静了。<br><img src="http://i.imgur.com/njKQlif.jpg" alt=""><br>　　塔塔塔，敲上代码测试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="keyword">as</span> image</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">fpath = <span class="string">'./2.jpg'</span></div><div class="line">im = image.open(fpath)</div><div class="line"></div><div class="line">im = im.resize((<span class="number">200</span>,<span class="number">200</span>));</div><div class="line"><span class="comment">#保存图片</span></div><div class="line">s_filename = <span class="string">'2'</span> + <span class="string">"_s.jpg"</span>;</div><div class="line">outpath = os.path.join(<span class="string">'./'</span>,s_filename);</div><div class="line">im.save(outpath,quality=<span class="number">75</span>);</div></pre></td></tr></table></figure></p>
<p>　　保存，运行，然后，<br><img src="http://i.imgur.com/mkt1TF8.jpg" alt=""></p>
<p>　　这又是什么鬼呀，惊得一身汗啊，只能百度一下···了，原来PIL安装完的时候提示了<code>JPEG support not available</code>，见下图：<br><img src="http://i.imgur.com/TiPwYPg.jpg" alt=""></p>
<p>　　百度大法都是在说要安装jpeg格式的解码器，而且都是在linux下的安装方法，再切到linux下又太费时间重来。索性就在Google一下windows下的解决方法(某搜索真是不上心)，神乎其神地发现了另外一个库，虽妥妥的安装起：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pillow</div></pre></td></tr></table></figure>
<p>　　终于代码在低沉的欢呼声中跑了起来。。。</p>
<h2 id="四-设计图片大小和水印添加方式"><a href="#四-设计图片大小和水印添加方式" class="headerlink" title="四. 设计图片大小和水印添加方式"></a>四. 设计图片大小和水印添加方式</h2><p>　　针对图片的大小缩放，为了美观需要等比例缩放，我将小图片的 宽定为<code>1000px</code>，同时在Python的转换函数中降低画质，缩小图片的内存大小；大图片的宽定为<code>3000px</code>，不做画质调整。</p>
<p>　　针对水印，由于为了美(bi)观(ge)，我事先设计了8种水印(4种样式x2种颜色)，分别粘贴在图片的四个边角上，只对大图片添加水印，水印样式如图：<br><img src="http://i.imgur.com/OsEd0s4.jpg" alt=""></p>
<p>4种样式：</p>
<ul>
<li>左边竖立：可以应用于左上角和左下角</li>
<li>右边竖立：可以应用于右上角和右下角</li>
<li>下边横立：可以应用于左下角和右下角</li>
<li>上边横立：可以应用于左上角和右上角</li>
</ul>
<p>（是的 我疯了）</p>
<p>2种颜色：</p>
<ul>
<li>绿色</li>
<li>蓝色</li>
</ul>
<p>　　以此可以看出，每个边角有两个样式(竖立和横立式)，样式由代码直接随机产生；每个水印又有两种颜色(蓝色和绿色)可以选择，颜色通过计算得出。所以<strong>图片的每个边角有4种水印可以选择，其中样式是随机选择，颜色是通过计算得出</strong>。</p>
<h2 id="整体流程设计"><a href="#整体流程设计" class="headerlink" title="整体流程设计"></a>整体流程设计</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>针对在当前目录下：</p>
<ul>
<li>创建<code>pic</code>目录用于存放需要处理的原始图片</li>
<li>创建<code>mask</code>目录用于存放水印图片。</li>
<li>创建<code>imgs-small</code>目录用于存放处理后的小图片</li>
<li>创建<code>imgs-big</code>目录用于存放处理后的大图片</li>
</ul>
<p><img src="http://i.imgur.com/oCQ6I3X.jpg" alt=""></p>
<p>目录的存储变量(<del>滥用全局变量了呀</del>)如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#读取需要处理的总目录，默认当前目录</span></div><div class="line">inputpath=<span class="string">"."</span></div><div class="line"><span class="comment">#小画质图片的输出路径</span></div><div class="line">s_outfilrpath = <span class="string">"./imgs-small"</span></div><div class="line"><span class="comment">#高画质图片的输出路径</span></div><div class="line">b_outfilrpath = <span class="string">"./imgs-big"</span></div><div class="line"><span class="comment">#水印的文件夹名称</span></div><div class="line">maskpath = <span class="string">"mask"</span></div><div class="line"><span class="comment">#需要处理的图片文件夹名称</span></div><div class="line">picturePath = <span class="string">"pic"</span></div><div class="line"><span class="comment">#保存读入图片的高宽比例</span></div><div class="line">H2W_ratio = <span class="number">0.0</span></div></pre></td></tr></table></figure>
<h3 id="代码函数结构"><a href="#代码函数结构" class="headerlink" title="代码函数结构:"></a>代码函数结构:</h3><h4 id="大体函数结构："><a href="#大体函数结构：" class="headerlink" title="大体函数结构："></a>大体函数结构：</h4><ol>
<li><strong>遍历文件夹函数(<em>readDirPath</em>)：</strong>遍历给定文件夹下的jpg格式图片</li>
<li><strong>图片转换函数(<em>convertImage</em>)：</strong>将读入的图片转换成大小两个图片</li>
<li><strong>小图片转换保存函数(<em>saveSmallPicture</em>)：</strong>将读入的图片按固定的宽度等比例缩小并保存到设定的输出目录</li>
<li><strong>大图片转换保存函数(<em>saveBigPicture</em>)：</strong>将读入的图片按固定的宽度等比例放大，然后添加水印，最后保存到设定的输出目录</li>
<li><strong>添加水印函数(<em>addMask</em>)：</strong>对读入的图片计算水印的位置和颜色，粘贴水印，最后返回粘贴水印后的图片。</li>
</ol>
<h4 id="各函数设计思路"><a href="#各函数设计思路" class="headerlink" title="各函数设计思路"></a>各函数设计思路</h4><h5 id="1-遍历文件夹函数-readDirPath"><a href="#1-遍历文件夹函数-readDirPath" class="headerlink" title="1. 遍历文件夹函数(readDirPath)"></a>1. 遍历文件夹函数(<em>readDirPath</em>)</h5><p>　　主要使用内置的<code>os模块</code>进行文件遍历，代码如下，其中<code>dirPath</code>为当前文件夹路径，<code>picturePath</code>为当前文件夹下存放待处理图片的文件夹名称：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#遍历输入文件夹下的jpg类型图片，进行图片转换</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readDirPath</span><span class="params">(dirPath)</span>:</span></div><div class="line">	<span class="comment">#组合图片的源目录pic文件夹</span></div><div class="line">	imgpath = os.path.join(dirPath,picturePath)</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> os.listdir(imgpath):</div><div class="line">		fpath = os.path.join(imgpath,x)</div><div class="line">		<span class="keyword">if</span> os.path.isfile(fpath):</div><div class="line">			<span class="keyword">if</span> fpath.find(<span class="string">'jpg'</span>)!= <span class="number">-1</span>:</div><div class="line">				convertImage(fpath)</div></pre></td></tr></table></figure>
<h5 id="2-图片转换函数-convertImage"><a href="#2-图片转换函数-convertImage" class="headerlink" title="2. 图片转换函数(convertImage)"></a>2. 图片转换函数(<em>convertImage</em>)</h5><p>　　读入图片，设置全局变量(<del>滥用全局了</del>)高宽比，分离出文件名，以便保存图片时重命名。调用大小图片保存函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#读入图片，转换出一个预览图和一个稍清晰的图片</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertImage</span><span class="params">(fpath)</span>:</span></div><div class="line">	<span class="keyword">global</span> H2W_ratio</div><div class="line">	im = image.open(fpath)</div><div class="line">	<span class="comment">#分离出(文件夹路径,文件名.jpg)</span></div><div class="line">	filename_attri = os.path.split(fpath);</div><div class="line">	<span class="comment">#分离文件名和后缀</span></div><div class="line">	filename_arry = os.path.splitext(filename_attri[<span class="number">1</span>])</div><div class="line">	filename = filename_arry[<span class="number">0</span>]</div><div class="line">	<span class="comment">#设置原图的高宽比</span></div><div class="line">	ori_width,ori_height = im.size</div><div class="line">	H2W_ratio = float(ori_height)/ori_width</div><div class="line"></div><div class="line">	<span class="comment">#保存小画质图片</span></div><div class="line">	saveSmallPicture(im,filename);</div><div class="line">	<span class="comment">#保存高画质图片</span></div><div class="line">	saveBigPicture(im,filename);</div><div class="line">	<span class="keyword">print</span> <span class="string">"finished!"</span></div><div class="line">	<span class="keyword">print</span> <span class="string">"********************"</span></div></pre></td></tr></table></figure>
<h5 id="3-小图片转换保存函数-saveSmallPicture"><a href="#3-小图片转换保存函数-saveSmallPicture" class="headerlink" title="3. 小图片转换保存函数(saveSmallPicture)"></a>3. 小图片转换保存函数(<em>saveSmallPicture</em>)</h5><p>　　对读入的图片进行等比例压缩，然后保存。其中<code>s_outfilrpath</code>为小图片保存的文件夹路径。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#压缩转换成小画质图片，不加水印，直接保存</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveSmallPicture</span><span class="params">(s_im,s_filename)</span>:</span></div><div class="line">	<span class="keyword">global</span> H2W_ratio</div><div class="line">	s_height = int(<span class="number">1000</span> * H2W_ratio);    <span class="comment">#等比例缩放，固定宽为1000px</span></div><div class="line">	<span class="comment">#压缩图片</span></div><div class="line">	s_im = s_im.resize((<span class="number">1000</span>,s_height),image.ANTIALIAS);</div><div class="line">	<span class="comment">#重命名</span></div><div class="line">	s_filename = s_filename + <span class="string">"_s.jpg"</span>;</div><div class="line">	<span class="comment">#保存图片</span></div><div class="line">	outpath = os.path.join(s_outfilrpath,s_filename);</div><div class="line">	s_im.save(outpath,quality=<span class="number">75</span>);</div></pre></td></tr></table></figure>
<h5 id="4-大图片转换保存函数-saveBigPicture"><a href="#4-大图片转换保存函数-saveBigPicture" class="headerlink" title="4. 大图片转换保存函数(saveBigPicture)"></a>4. 大图片转换保存函数(<em>saveBigPicture</em>)</h5><p>　　对读入的图片进行等比例放大设置，这里考虑到图片有横竖两种，所以对宽或高中的最大值进行固定值设置。然后调用添加水印函数，最后保存大图片。其中<code>b_outfilrpath</code>为大图片保存的文件夹路径。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#转换成一个清晰的图片，直接保存</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveBigPicture</span><span class="params">(b_im,b_filename)</span>:</span></div><div class="line">	<span class="keyword">global</span> H2W_ratio</div><div class="line">	<span class="comment">#获取读入图片的大小，等比例缩放，宽固定为3000px</span></div><div class="line">	b_w,b_h = b_im.size;</div><div class="line">	<span class="keyword">if</span> b_w &gt; b_h:</div><div class="line">		b_w = <span class="number">3000</span>;</div><div class="line">		b_h = int(b_w*H2W_ratio);</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		b_h=<span class="number">3000</span>;</div><div class="line">		b_w=int(b_h/H2W_ratio);</div><div class="line">	<span class="comment">#压缩图片</span></div><div class="line">	b_im = b_im.resize((b_w,b_h),image.ANTIALIAS);</div><div class="line">	<span class="comment">#添加水印</span></div><div class="line">	b_im = addMask(b_im)</div><div class="line">	<span class="comment">#保存图片</span></div><div class="line">	b_filename = b_filename + <span class="string">"_b.jpg"</span>;</div><div class="line">	outpath = os.path.join(b_outfilrpath, b_filename);</div><div class="line">	b_im.save(outpath,quality=<span class="number">100</span>)</div></pre></td></tr></table></figure>
<h5 id="5-添加水印函数-addMask"><a href="#5-添加水印函数-addMask" class="headerlink" title="5. 添加水印函数(addMask)"></a>5. 添加水印函数(<em>addMask</em>)</h5><p>　　重点来了，这是最绕人的函数，也怪我把数据定义的太奇怪了(<del>还是水印搞多了</del>)。</p>
<p><strong>思路：</strong></p>
<p><strong>[1]. 首先确定水印的位置</strong></p>
<blockquote>
<p>水印首先应该覆盖在较<code>纯色</code>的角落上，即覆盖的<code>角落块</code>上，像素的颜色变化最小，这样贴上去的透明水印才看的清楚。但单独计算rgb比较每个像素的变化趋势又太复杂、费时间，所以我想了一个折中方法。</p>
</blockquote>
<p>　　先将图片分割出四个<code>角落块</code>，再对单个<code>角落块</code>进行处理，设计一个函数(<em><code>getLocation</code></em>),方法如下：</p>
<ul>
<li>将读入的原始转为灰度图片，使用<code>im.convert(&#39;L&#39;)</code></li>
<li>分割出原始图片的四个<code>角落块</code>，使用<code>im.crop()</code></li>
<li>分别计算四个<code>角落块</code>区域中像素点的灰度方差(函数<em>computeVariance</em>，后面介绍)，获取灰度方差值最小的<code>角落块</code>(方差最小说明<code>角落块</code>的灰度值变化幅度最小，画面中图形颜色明度变化不大，适合打水印)</li>
</ul>
<p>　　函数<em>computeVariance</em>功能为：对读入的<code>角落块</code>图片采集100个像素点(由于代码数据类型的转换float到int，对于小画质的图片，可能最后没有采集到100个点)，获取每个像素点的灰度值，然后存入list中，最后利用<code>numpy模块</code>计算list中数据的方差值。采样方式类似下图：<br><img src="http://i.imgur.com/HuOKlxZ.jpg" alt=""></p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">对给定图片的采样<span class="number">100</span>个点计算方差</div><div class="line"><span class="comment">#返回采样点的方差</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeVariance</span><span class="params">(m_im)</span>:</span></div><div class="line">	img_arry = m_im.load()</div><div class="line">	m_w,m_h = m_im.size</div><div class="line">	pixelList=[]</div><div class="line">	n=<span class="number">0</span></div><div class="line">	<span class="comment">#获取采样点</span></div><div class="line">	<span class="keyword">while</span> n &lt;<span class="number">9</span>:</div><div class="line">		t_w = int(m_w*<span class="number">0.1</span>*n)</div><div class="line">		m = <span class="number">0</span></div><div class="line">		n = n+<span class="number">1</span></div><div class="line">		<span class="keyword">while</span> m &lt; <span class="number">9</span>:</div><div class="line">			t_h = int(m_h*<span class="number">0.1</span>*m)</div><div class="line">			pixelList.append(img_arry[t_w,t_h])</div><div class="line">			m=m+<span class="number">1</span></div><div class="line">	<span class="comment">#计算方差</span></div><div class="line">	m_variance = numpy.var(pixelList)</div><div class="line">	<span class="keyword">return</span> m_variance</div></pre></td></tr></table></figure>
<p>　　这样就找出的水印适合粘贴的位置(左上，右上，左下，右下)。函数<em><code>getLocation</code></em>的代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#判断图片四个角，哪一块区域的图像(灰度值)变化最小(适合打水印)</span></div><div class="line"><span class="comment">#location_dict存储四个角的位置坐标</span></div><div class="line"><span class="comment">#返回位置(字符串表示)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLocation</span><span class="params">(m_im,location_dict,m_w,m_h)</span>:</span></div><div class="line">	<span class="comment">#把图像转换为灰度空间</span></div><div class="line">	m_im = m_im.convert(<span class="string">"L"</span>)</div><div class="line">	<span class="comment">#分割出四个角图片</span></div><div class="line">	<span class="comment">#box为角落块在原始图上的左上和右下坐标(x1,y1,x2,y2)</span></div><div class="line">	box = (location_dict[<span class="string">"lefttop"</span>][<span class="number">0</span>], location_dict[<span class="string">"lefttop"</span>][<span class="number">1</span>], location_dict[<span class="string">"lefttop"</span>][<span class="number">0</span>]+m_w, location_dict[<span class="string">"lefttop"</span>][<span class="number">1</span>]+m_h)</div><div class="line">	lefttop_region = m_im.crop(box)</div><div class="line"></div><div class="line">	box = (location_dict[<span class="string">"righttop"</span>][<span class="number">0</span>], location_dict[<span class="string">"righttop"</span>][<span class="number">1</span>], location_dict[<span class="string">"righttop"</span>][<span class="number">0</span>]+m_w, location_dict[<span class="string">"righttop"</span>][<span class="number">1</span>]+m_h)</div><div class="line">	righttop_region = m_im.crop(box)</div><div class="line"></div><div class="line">	box = (location_dict[<span class="string">"leftbottom"</span>][<span class="number">0</span>], location_dict[<span class="string">"leftbottom"</span>][<span class="number">1</span>], location_dict[<span class="string">"leftbottom"</span>][<span class="number">0</span>]+m_w, location_dict[<span class="string">"leftbottom"</span>][<span class="number">1</span>]+m_h)</div><div class="line">	leftbottom_region = m_im.crop(box)</div><div class="line"></div><div class="line">	box = (location_dict[<span class="string">"rightbottom"</span>][<span class="number">0</span>], location_dict[<span class="string">"rightbottom"</span>][<span class="number">1</span>], location_dict[<span class="string">"rightbottom"</span>][<span class="number">0</span>]+m_w, location_dict[<span class="string">"rightbottom"</span>][<span class="number">1</span>]+m_h)</div><div class="line">	rightbottom_region = m_im.crop(box)</div><div class="line">	<span class="comment">#分别计算四个角的方差</span></div><div class="line">	lefttop_variance = computeVariance(lefttop_region)</div><div class="line">	righttop_variance = computeVariance(righttop_region)</div><div class="line">	leftbottom_variance = computeVariance(leftbottom_region)</div><div class="line">	rightbottom_variance = computeVariance(rightbottom_region)</div><div class="line">	<span class="comment">#获取最小方差的位置</span></div><div class="line">	t_type = <span class="string">"lefttop"</span></div><div class="line">	minVariance = <span class="number">1000</span></div><div class="line">	<span class="keyword">if</span> minVariance &gt; lefttop_variance:</div><div class="line">		minVariance = lefttop_variance</div><div class="line"></div><div class="line">	<span class="keyword">if</span> minVariance &gt; righttop_variance:</div><div class="line">		minVariance = righttop_variance</div><div class="line">		t_type = <span class="string">"righttop"</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> minVariance &gt; leftbottom_variance:</div><div class="line">		minVariance = leftbottom_variance</div><div class="line">		t_type = <span class="string">"leftbottom"</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> minVariance &gt; rightbottom_variance:</div><div class="line">		minVariance = rightbottom_variance</div><div class="line">		t_type = <span class="string">"rightbottom"</span></div><div class="line"></div><div class="line">	<span class="keyword">return</span> t_type</div></pre></td></tr></table></figure>
<p><strong>[2]. 确定水印的颜色</strong></p>
<p>　　类似于确定位置的思路，在确定了水印粘贴的位置后，对需要粘贴的<code>角落块</code>采样100个数据点，计算块内所有采样点的B(蓝色像素值)和G(绿色像素值)的均值，处理方式如下：</p>
<ul>
<li>当B的均值大于150是采用绿色水印</li>
<li>当G的均值大于150时采用蓝色水印(<del>是时候再做一个红色水印了，蛤蛤</del>)</li>
<li>当G,B均值都大于150时优先采用绿色水印(<del>醉心喜欢</del>)</li>
<li>当G,B均值都小于150时，随机产生使用的水印颜色</li>
<li>返回水印颜色类型：0–蓝色，1–绿色</li>
</ul>
<p>函数<em>computeGB</em>代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#location为确定水印粘贴的位置(字符串表示)</span></div><div class="line"><span class="comment">#location_dict存储四个角的位置坐标</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeGB</span><span class="params">(m_im,location,location_dict,m_w,m_h)</span>:</span></div><div class="line">	<span class="keyword">print</span> <span class="string">"put mask on "</span>+location</div><div class="line">	<span class="comment">#根据水印粘贴的位置，在原图中分割出水印覆盖部分的图片</span></div><div class="line">	box = (location_dict[location][<span class="number">0</span>], location_dict[location][<span class="number">1</span>], location_dict[location][<span class="number">0</span>]+m_w, location_dict[location][<span class="number">1</span>]+m_h)</div><div class="line">	img_region = m_im.crop(box)</div><div class="line"></div><div class="line">	img_arry = img_region.load()</div><div class="line">	t_w,t_h = img_region.size</div><div class="line">	<span class="comment">#采样G和B</span></div><div class="line">	pixelGList=[]</div><div class="line">	pixelBList=[]</div><div class="line">	n=<span class="number">0</span></div><div class="line">	<span class="keyword">while</span> n &lt;<span class="number">9</span>:</div><div class="line">		t_w = int(m_w*<span class="number">0.1</span>*n)</div><div class="line">		m = <span class="number">0</span></div><div class="line">		n = n+<span class="number">1</span></div><div class="line">		<span class="keyword">while</span> m &lt; <span class="number">9</span>:</div><div class="line">			t_h = int(m_h*<span class="number">0.1</span>*m)</div><div class="line">			pixelGList.append(img_arry[t_w,t_h][<span class="number">1</span>])</div><div class="line">			pixelBList.append(img_arry[t_w,t_h][<span class="number">2</span>])</div><div class="line">			m=m+<span class="number">1</span></div><div class="line">	<span class="comment">#计算G，B的均值</span></div><div class="line">	t_Gmean = numpy.mean(pixelGList)</div><div class="line">	t_Bmean = numpy.mean(pixelBList)</div><div class="line">	<span class="keyword">print</span> <span class="string">"GB:"</span></div><div class="line">	<span class="keyword">print</span> (t_Gmean,t_Bmean)</div><div class="line">	t_type = <span class="number">0</span></div><div class="line">	<span class="comment">#绿色过多，用蓝色水印</span></div><div class="line">	<span class="keyword">if</span> t_Bmean &gt; <span class="number">150</span>:</div><div class="line">		t_type = <span class="number">1</span></div><div class="line">	<span class="keyword">elif</span> t_Gmean &gt; <span class="number">150</span>:</div><div class="line">		t_type = <span class="number">0</span></div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		t_type = random.randint(<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">		<span class="keyword">print</span> <span class="string">"random_GB"</span></div><div class="line">	<span class="keyword">return</span> t_type</div></pre></td></tr></table></figure></p>
<p><strong>[3]. 读取、粘贴水印</strong></p>
<p>　　进入最后的添加水印函数<em><code>addMask</code></em>。</p>
<p>　　介绍函数之前，我先介绍一下水印的存储方式，8组水印，每个<code>角落块</code>有(2种颜色x2种样式)的选择(上面介绍过了)，通过list来嵌套存储水印的[名字.png]，最后的总索引为<code>mask_list</code>，如下代码所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#8组水印，两种颜色，两种样式</span></div><div class="line">blue_list_bottomleft = [<span class="string">'mask_blue_left.png'</span>,<span class="string">'mask_blue_bottom.png'</span>]</div><div class="line">blue_list_bottomright = [<span class="string">'mask_blue_right.png'</span>,<span class="string">'mask_blue_bottom.png'</span>]</div><div class="line">blue_list_topleft = [<span class="string">'mask_blue_left.png'</span>,<span class="string">'mask_blue_top.png'</span>]</div><div class="line">blue_list_topright = [<span class="string">'mask_blue_right.png'</span>,<span class="string">'mask_blue_top.png'</span>]</div><div class="line">green_list_bottomleft = [<span class="string">'mask_green_left.png'</span>,<span class="string">'mask_green_bottom.png'</span>]</div><div class="line">green_list_bottomright = [<span class="string">'mask_green_right.png'</span>,<span class="string">'mask_green_bottom.png'</span>]</div><div class="line">green_list_topleft = [<span class="string">'mask_green_left.png'</span>,<span class="string">'mask_green_top.png'</span>]</div><div class="line">green_list_topright = [<span class="string">'mask_green_right.png'</span>,<span class="string">'mask_green_top.png'</span>]</div><div class="line"><span class="comment">#两组水印：蓝色和绿色</span></div><div class="line">mask_list_blue = [blue_list_topleft,blue_list_topright,blue_list_bottomleft,blue_list_bottomright];</div><div class="line">mask_list_green = [green_list_topleft,green_list_topright,green_list_bottomleft,green_list_bottomright];</div><div class="line"><span class="comment">#总的水印索引目录</span></div><div class="line">mask_list = [mask_list_blue,mask_list_green]</div></pre></td></tr></table></figure></p>
<p>函数<em><code>addMask</code></em>的设计思路：</p>
<ul>
<li>首先利用随机函数，随机产生水印的类型(竖立–0，横立–1)</li>
<li>根据水印类型，任意读取一个同类型水印，计算水印的高宽比，用于等比例缩放</li>
<li>计算一个水印间距值<code>mask_interval</code>，便于水印的美观显示</li>
<li>按比例缩放水印，分竖立和横立两种不同的缩放方式(缩放比例在PS中事先计算好)</li>
<li>计算两种水印(竖立，横立)在实际图片上的贴图位置(水印的左上角坐标x，y，相应地加上间隔)，存于两个list中</li>
<li>通过计算，获取水印的粘贴位置和水印的颜色</li>
<li>按照类型和颜色读取水印，在原图中粘贴水印到计算出的位置，使用<code>im.paste()</code></li>
</ul>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#图片添加水印</span></div><div class="line"><span class="comment">#返回添加水印后的图片</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">addMask</span><span class="params">(m_im)</span>:</span></div><div class="line">	<span class="keyword">global</span> mask_list_blue</div><div class="line">	<span class="keyword">global</span> mask_list_green</div><div class="line">	<span class="keyword">global</span> maskpath</div><div class="line">	<span class="keyword">global</span> inputpath</div><div class="line"></div><div class="line">	<span class="comment">#组合水印的文件夹目录mask</span></div><div class="line">	t_maskpath = os.path.join(inputpath,maskpath)</div><div class="line">	<span class="comment">#随机获取水印类型(竖立--0，横立--1)两种</span></div><div class="line">	mask_type = random.randint(<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">	<span class="comment">#根据水印样式，读取一个同样式图片计算高宽比</span></div><div class="line">	t_imgpath = os.path.join(t_maskpath,mask_list_blue[<span class="number">0</span>][mask_type])</div><div class="line">	im_mask = image.open(t_imgpath)</div><div class="line">	<span class="comment">#根据类型读取水印实际大小，计算高宽比</span></div><div class="line">	t_w,t_h = im_mask.size</div><div class="line">	t_radio = float(t_h)/t_w</div><div class="line">	b_w,b_h = m_im.size</div><div class="line">	<span class="comment">#按1.8%的高度读取水印离图片[边界的距离](百分比都是事先在PS中计算出来的)</span></div><div class="line">	mask_interval = int(b_h*<span class="number">0.018</span>)</div><div class="line">	</div><div class="line">	<span class="comment">#根据水印类型和实际图片的大小，计算出水印调整后的大小</span></div><div class="line">	<span class="comment">#具体的(百分比)都是事先在PS中计算出来的</span></div><div class="line">	<span class="keyword">if</span> mask_type==<span class="number">0</span>:</div><div class="line">		<span class="comment">#竖立按11%高等比例缩放</span></div><div class="line">		t_h = int(b_h*<span class="number">0.11</span>)</div><div class="line">		t_w = int(t_h/t_radio)</div><div class="line">		im_mask=im_mask.resize((t_w,t_h))</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="comment">#横立按7.5%高等比例缩放</span></div><div class="line">		t_h = int(b_h*<span class="number">0.075</span>)</div><div class="line">		t_w = int(t_h/t_radio)</div><div class="line">		im_mask=im_mask.resize((t_w,t_h))</div><div class="line">	</div><div class="line">	<span class="comment">#计算两种水印类型(竖立，横立)在实际图片上的贴图位置(水印的左上角坐标x，y，相应地加上间隔)</span></div><div class="line">	maskV_location_point =&#123;<span class="string">'lefttop'</span>:(<span class="number">0</span>,mask_interval),<span class="string">'righttop'</span>:(b_w-t_w,mask_interval),<span class="string">'leftbottom'</span>:(<span class="number">0</span>,b_h-t_h-mask_interval),\</div><div class="line">	<span class="string">'rightbottom'</span>:(b_w-t_w,b_h-t_h-mask_interval)&#125;</div><div class="line">	maskH_location_point =&#123;<span class="string">'lefttop'</span>:(mask_interval,<span class="number">0</span>),<span class="string">'righttop'</span>:(b_w-t_w-mask_interval,<span class="number">0</span>),<span class="string">'leftbottom'</span>:(mask_interval,b_h-t_h),\</div><div class="line">	<span class="string">'rightbottom'</span>:(b_w-t_w-mask_interval,b_h-t_h)&#125;</div><div class="line">	mask_location = <span class="string">"rightbottom"</span></div><div class="line">	<span class="comment">#获取贴图位置和具体的贴图类型(竖立--0，横立--1)</span></div><div class="line">	<span class="keyword">if</span> mask_type==<span class="number">0</span>:</div><div class="line">		<span class="comment">#获取水印贴图在原图的位置(左上，右上，左下，右下)</span></div><div class="line">		mask_location = getLocation(m_im,maskV_location_point,t_w,t_h)</div><div class="line">		t_VHtype = getMaskType(mask_location)    <span class="comment">#获取水印在四个角的位置下标</span></div><div class="line">		t_RGBtype = computeGB(m_im,mask_location,maskV_location_point,t_w,t_h)    <span class="comment">#获取水印的颜色下标</span></div><div class="line">		<span class="comment">#读取具体的水印</span></div><div class="line">		t_imgpath = os.path.join(t_maskpath,mask_list[t_RGBtype][t_VHtype][mask_type])</div><div class="line">		<span class="keyword">print</span> <span class="string">"maskpath:"</span>+t_imgpath</div><div class="line">		im_mask = image.open(t_imgpath)</div><div class="line">		im_mask = im_mask.resize((t_w,t_h))</div><div class="line">		<span class="comment">#粘贴水印</span></div><div class="line">		m_im.paste(im_mask,maskV_location_point[mask_location],im_mask.convert(<span class="string">'RGBA'</span>))</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		mask_location = getLocation(m_im,maskH_location_point,t_w,t_h)</div><div class="line">		t_VHtype = getMaskType(mask_location)</div><div class="line">		t_RGBtype = computeGB(m_im,mask_location,maskH_location_point,t_w,t_h)</div><div class="line">		t_imgpath = os.path.join(t_maskpath,mask_list[t_RGBtype][t_VHtype][mask_type])</div><div class="line">		<span class="keyword">print</span> <span class="string">"maskpath:"</span>+t_imgpath</div><div class="line">		im_mask = image.open(t_imgpath)</div><div class="line">		im_mask = im_mask.resize((t_w,t_h))</div><div class="line">		m_im.paste(im_mask,maskH_location_point[mask_location],im_mask.convert(<span class="string">'RGBA'</span>))</div><div class="line">	<span class="keyword">return</span> m_im</div></pre></td></tr></table></figure>
<p>其中<em><code>getMaskType</code></em>函数为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#根据水印所在的角 返回在水印数组中的下标</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMaskType</span><span class="params">(maskLocation)</span>:</span></div><div class="line">	<span class="keyword">if</span> maskLocation == <span class="string">"lefttop"</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line">	<span class="keyword">if</span> maskLocation == <span class="string">"righttop"</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">if</span> maskLocation == <span class="string">"leftbottom"</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">2</span></div><div class="line">	<span class="keyword">if</span> maskLocation == <span class="string">"rightbottom"</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">3</span></div></pre></td></tr></table></figure>
<h2 id="五-结束"><a href="#五-结束" class="headerlink" title="五. 结束"></a>五. 结束</h2><p>　　犯了一个的错误就是习惯性的使用了C的“++”操作符，在for循环中出现死循环，导致内存溢出，找了好久。。。最后折腾折腾，总共花了一天左右时间，还好最终效果不错，赶脚以后做图方便多了。当然代码还是很乱的(<del>蛤蛤</del>)，不知道还有没有可读性(<del>又蛤蛤</del>)，有时间再优化一下。</p>
<p>　　提升：当图片非常多的情况下可以添加多线程处理。</p>
<p>最后上个效果图：<br><img src="http://i.imgur.com/KxIjPCS.png" alt=""><br>水印效果：<br><img src="http://i.imgur.com/cvKTnzt.jpg" alt=""><br><img src="http://i.imgur.com/LYsh5AF.jpg" alt=""><br><img src="http://i.imgur.com/Mw56YBy.jpg" alt=""><br>照片墙地址：<a href="http://fish.sweetfish.cn/2014/11-18/gallery/" target="_blank" rel="external">~戳我~</a></p>
<p>体会：果然还是Python大法好啊，虽然也有不少坑(<del>蛤蛤</del>)<br>源代码：<a href="https://github.com/sweetfish/convertImage_py" target="_blank" rel="external">GitHUb</a></p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 图片处理 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
